<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 26;
const int numberOfTasks = 50;
const int numberOfMachines = 16;
const int maxDependencies = 5;
const int longestChain = 4;
const int globalChainSize[numberOfChains] = {4,2,3,2,2,2,2,2,3,2,4,2,2,2,2,2,1,1,2,2,1,1,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,7,24,33},
{1,45,-1,-1},
{2,9,29,-1},
{3,37,-1,-1},
{4,49,-1,-1},
{5,43,-1,-1},
{6,38,-1,-1},
{8,35,-1,-1},
{10,21,46,-1},
{11,36,-1,-1},
{12,18,34,48},
{13,19,-1,-1},
{14,41,-1,-1},
{15,47,-1,-1},
{16,42,-1,-1},
{17,44,-1,-1},
{20,-1,-1,-1},
{22,-1,-1,-1},
{23,31,-1,-1},
{25,30,-1,-1},
{26,-1,-1,-1},
{27,-1,-1,-1},
{28,-1,-1,-1},
{32,-1,-1,-1},
{39,-1,-1,-1},
{40,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {9,6,1,3,1,7,6,15,16,19,13,19,1,2,10,20,6,8,9,2,3,5,2,15,20,7,10,10,18,2,19,10,3,9,3,10,20,3,1,8,7,17,9,3,10,10,9,6,9,10};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{0,1,3,-1,-1},
{-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{12,-1,-1,-1,-1},
{13,-1,-1,-1,-1},
{13,-1,-1,-1,-1},
{10,-1,-1,-1,-1},
{11,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1},
{7,-1,-1,-1,-1},
{0,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{12,-1,-1,-1,-1},
{2,9,17,-1,-1},
{11,25,26,-1,-1},
{23,-1,-1,-1,-1},
{12,-1,-1,-1,-1},
{4,22,23,24,-1},
{13,16,18,-1,-1},
{8,14,-1,-1,-1},
{10,11,-1,-1,-1},
{3,16,-1,-1,-1},
{6,12,-1,-1,-1},
{17,-1,-1,-1,-1},
{-1,-1,-1,-1,-1},
{14,-1,-1,-1,-1},
{16,30,-1,-1,-1},
{5,30,-1,-1,-1},
{6,17,31,-1,-1},
{0,1,23,32,37},
{20,21,36,-1,-1},
{15,20,30,39,-1},
{2,34,-1,-1,-1},
{4,14,-1,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
            &amp;&amp; cost' == 1</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
