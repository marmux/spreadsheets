<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 16;
const int numberOfTasks = 50;
const int numberOfMachines = 5;
const int maxDependencies = 13;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {6,6,3,4,4,3,4,3,2,4,2,4,1,1,2,1};
const int globalChains[numberOfChains][longestChain] = {
{0,6,10,25,32,39},
{1,13,36,40,44,46},
{2,33,45,-1,-1,-1},
{3,38,41,43,-1,-1},
{4,11,31,49,-1,-1},
{5,21,48,-1,-1,-1},
{7,16,30,34,-1,-1},
{8,23,27,-1,-1,-1},
{9,35,-1,-1,-1,-1},
{12,20,22,42,-1,-1},
{14,28,-1,-1,-1,-1},
{15,18,26,47,-1,-1},
{17,-1,-1,-1,-1,-1},
{19,-1,-1,-1,-1,-1},
{24,37,-1,-1,-1,-1},
{29,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {6,6,5,5,4,6,5,6,6,5,7,6,5,4,7,6,6,4,5,8,6,6,7,5,6,5,4,7,6,7,7,5,6,6,6,6,7,6,6,6,4,4,4,4,5,5,6,5,4,5};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,9,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,7,12,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,8,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,7,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,12,17,18,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,9,18,19,20,21,-1,-1,-1,-1,-1,-1,-1},
{1,6,8,9,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,10,13,15,17,-1,-1,-1,-1,-1,-1,-1,-1},
{13,15,18,20,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,10,17,23,26,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,14,16,19,-1,-1,-1,-1,-1,-1,-1,-1},
{4,10,14,23,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,14,16,19,20,23,25,26,27,28,-1,-1},
{1,4,6,7,9,11,12,14,15,17,26,29,30},
{0,1,13,14,16,18,25,-1,-1,-1,-1,-1,-1},
{0,2,4,8,9,10,16,21,28,-1,-1,-1,-1},
{3,8,12,16,29,30,-1,-1,-1,-1,-1,-1,-1},
{0,5,9,11,26,-1,-1,-1,-1,-1,-1,-1,-1},
{1,8,9,13,20,21,26,28,30,-1,-1,-1,-1},
{2,24,29,32,36,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,9,13,15,21,26,27,28,31,33,-1,-1},
{0,7,8,14,15,20,27,28,32,35,-1,-1,-1},
{3,4,6,13,15,24,36,37,-1,-1,-1,-1,-1},
{1,2,5,9,11,14,16,17,24,28,38,-1,-1},
{1,22,23,24,31,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,16,19,22,23,31,34,35,40,41,-1,-1},
{0,1,7,17,26,40,-1,-1,-1,-1,-1,-1,-1},
{1,2,24,33,36,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,14,20,22,36,37,40,44,-1,-1,-1,-1},
{13,26,33,38,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,8,10,12,14,21,23,26,31,33,47,-1},
{3,5,11,13,14,18,20,22,26,30,31,38,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
            &amp;&amp; cost' == 1</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
