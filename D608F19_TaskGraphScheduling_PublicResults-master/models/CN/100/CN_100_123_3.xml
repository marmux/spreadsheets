<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 31;
const int numberOfTasks = 100;
const int numberOfMachines = 3;
const int maxDependencies = 18;
const int longestChain = 10;
const int globalChainSize[numberOfChains] = {10,5,6,2,7,5,2,4,3,4,3,3,2,3,4,3,4,3,2,2,4,2,2,4,2,3,1,1,1,1,2};
const int globalChains[numberOfChains][longestChain] = {
{0,17,23,30,40,69,77,82,91,93},
{1,31,74,80,95,-1,-1,-1,-1,-1},
{2,81,85,89,94,96,-1,-1,-1,-1},
{3,87,-1,-1,-1,-1,-1,-1,-1,-1},
{4,25,37,44,64,86,98,-1,-1,-1},
{5,55,61,72,92,-1,-1,-1,-1,-1},
{6,97,-1,-1,-1,-1,-1,-1,-1,-1},
{7,52,62,78,-1,-1,-1,-1,-1,-1},
{8,63,79,-1,-1,-1,-1,-1,-1,-1},
{9,13,58,99,-1,-1,-1,-1,-1,-1},
{10,24,83,-1,-1,-1,-1,-1,-1,-1},
{11,65,84,-1,-1,-1,-1,-1,-1,-1},
{12,76,-1,-1,-1,-1,-1,-1,-1,-1},
{14,48,71,-1,-1,-1,-1,-1,-1,-1},
{15,34,45,68,-1,-1,-1,-1,-1,-1},
{16,53,67,-1,-1,-1,-1,-1,-1,-1},
{18,38,54,70,-1,-1,-1,-1,-1,-1},
{19,20,75,-1,-1,-1,-1,-1,-1,-1},
{21,57,-1,-1,-1,-1,-1,-1,-1,-1},
{22,90,-1,-1,-1,-1,-1,-1,-1,-1},
{26,29,39,46,-1,-1,-1,-1,-1,-1},
{27,66,-1,-1,-1,-1,-1,-1,-1,-1},
{28,88,-1,-1,-1,-1,-1,-1,-1,-1},
{32,51,59,60,-1,-1,-1,-1,-1,-1},
{33,35,-1,-1,-1,-1,-1,-1,-1,-1},
{36,43,50,-1,-1,-1,-1,-1,-1,-1},
{41,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{42,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{47,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{49,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{56,73,-1,-1,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {6,17,10,6,9,4,2,6,7,18,2,10,1,5,6,4,6,8,1,13,9,4,1,9,6,4,3,5,3,6,16,3,4,10,3,3,11,4,19,2,10,8,2,17,4,4,8,10,1,7,9,17,20,16,8,4,4,4,5,18,8,18,7,19,3,2,3,13,7,13,1,12,14,6,13,8,7,2,5,4,13,5,9,2,9,16,4,17,2,6,5,8,3,1,7,10,8,1,8,9};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,9,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,10,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,14,16,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,8,15,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,16,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,11,14,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,7,10,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,4,7,12,13,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,15,20,21,25,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,17,19,23,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,9,10,16,17,19,20,23,28,-1,-1,-1,-1,-1,-1,-1,-1},
{0,25,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,10,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,14,15,17,21,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,5,6,28,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,27,30,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,8,24,25,26,30,31,35,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,18,20,25,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,15,24,29,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,10,25,29,30,32,34,37,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,15,21,23,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,30,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,10,18,32,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,20,25,26,30,35,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,24,30,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,21,39,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,12,14,20,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,24,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,14,28,29,42,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,13,19,21,32,44,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,7,10,18,23,24,34,41,42,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,10,16,26,27,35,37,39,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,14,28,38,43,44,45,46,47,51,-1,-1,-1,-1,-1,-1,-1,-1},
{5,7,12,15,17,19,26,28,36,37,38,40,50,-1,-1,-1,-1,-1},
{0,7,24,32,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,8,19,21,26,31,32,34,41,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,6,13,17,28,32,46,53,54,-1,-1,-1,-1,-1,-1,-1,-1},
{8,11,23,38,45,47,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,6,10,32,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,11,30,33,34,41,44,45,55,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,13,16,40,43,52,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,8,14,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,7,12,23,40,44,45,51,55,56,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,11,13,17,18,19,42,53,56,61,-1,-1,-1,-1,-1,-1,-1},
{0,15,27,33,35,42,48,58,60,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,19,27,33,38,47,49,53,55,59,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,27,31,44,45,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,17,18,30,40,41,44,45,48,54,57,-1,-1,-1,-1,-1,-1,-1},
{3,17,19,40,51,52,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,16,21,31,42,44,48,57,66,67,70,-1,-1,-1,-1,-1,-1,-1},
{4,10,14,18,19,25,34,39,51,57,58,59,61,-1,-1,-1,-1,-1},
{0,16,31,48,56,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,4,5,21,24,26,31,40,41,47,51,61,62,-1,-1,-1,-1},
{2,4,16,20,21,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,11,12,14,18,25,31,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,8,12,13,16,20,28,35,37,65,66,69,-1,-1,-1,-1,-1,-1},
{3,6,25,27,29,53,58,62,63,64,68,76,-1,-1,-1,-1,-1,-1},
{7,8,9,11,24,26,35,39,47,48,54,55,60,61,63,70,71,73},
{24,30,49,58,59,63,66,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,16,31,36,44,46,49,62,69,70,-1,-1,-1,-1,-1,-1,-1,-1},
{0,30,35,43,70,77,78,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,7,18,19,24,26,35,52,81,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,10,18,20,27,36,46,50,57,65,73,74,75,81,-1,-1,-1,-1},
{3,6,30,36,38,47,60,61,66,74,81,84,-1,-1,-1,-1,-1,-1},
{5,9,19,25,36,40,44,52,57,58,63,64,69,-1,-1,-1,-1,-1},
{3,5,9,21,23,27,29,30,38,40,44,58,63,-1,-1,-1,-1,-1},
{0,20,28,31,33,35,38,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,12,17,19,20,39,50,64,74,78,85,-1,-1,-1,-1,-1,-1,-1},
{14,22,26,28,34,41,59,60,62,66,-1,-1,-1,-1,-1,-1,-1,-1},
{7,11,21,23,24,25,38,43,66,69,72,82,84,86,-1,-1,-1,-1},
{0,9,11,20,27,30,47,50,51,56,72,78,-1,-1,-1,-1,-1,-1},
{9,25,33,37,43,44,51,69,73,81,83,85,91,-1,-1,-1,-1,-1},
{16,31,35,44,48,49,52,62,70,74,75,87,89,-1,-1,-1,-1,-1},
{2,3,21,23,26,46,53,62,63,69,70,80,88,-1,-1,-1,-1,-1},
{7,11,22,27,31,47,54,66,71,80,83,94,-1,-1,-1,-1,-1,-1},
{1,3,6,16,24,29,30,34,35,39,45,50,52,94,-1,-1,-1,-1},
{9,15,28,29,33,35,41,44,53,61,63,69,86,88,91,-1,-1,-1},
{2,15,18,22,23,25,28,44,46,53,54,58,65,67,68,75,88,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
            &amp;&amp; cost' == 1</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
