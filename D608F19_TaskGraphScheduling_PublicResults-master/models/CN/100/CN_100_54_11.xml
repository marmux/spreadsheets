<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 36;
const int numberOfTasks = 100;
const int numberOfMachines = 11;
const int maxDependencies = 21;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {4,3,2,3,2,2,5,5,5,3,6,3,3,4,6,2,2,2,4,3,3,1,2,3,2,2,2,4,2,2,2,1,2,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,16,55,88,-1,-1},
{1,82,97,-1,-1,-1},
{2,80,-1,-1,-1,-1},
{3,61,95,-1,-1,-1},
{4,90,-1,-1,-1,-1},
{5,91,-1,-1,-1,-1},
{6,44,51,76,89,-1},
{7,38,48,87,98,-1},
{8,26,47,63,99,-1},
{9,66,77,-1,-1,-1},
{10,11,53,62,69,78},
{12,25,92,-1,-1,-1},
{13,74,93,-1,-1,-1},
{14,68,84,94,-1,-1},
{15,29,43,58,70,96},
{17,86,-1,-1,-1,-1},
{18,83,-1,-1,-1,-1},
{19,71,-1,-1,-1,-1},
{20,27,49,81,-1,-1},
{21,59,79,-1,-1,-1},
{22,39,67,-1,-1,-1},
{23,-1,-1,-1,-1,-1},
{24,64,-1,-1,-1,-1},
{28,54,85,-1,-1,-1},
{30,72,-1,-1,-1,-1},
{31,73,-1,-1,-1,-1},
{32,41,-1,-1,-1,-1},
{33,40,56,65,-1,-1},
{34,42,-1,-1,-1,-1},
{35,75,-1,-1,-1,-1},
{36,46,-1,-1,-1,-1},
{37,-1,-1,-1,-1,-1},
{45,60,-1,-1,-1,-1},
{50,-1,-1,-1,-1,-1},
{52,-1,-1,-1,-1,-1},
{57,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {5,6,5,6,6,5,6,4,5,6,7,4,5,5,5,6,7,7,6,5,4,5,8,7,6,5,6,4,7,6,7,4,6,6,4,5,6,5,5,5,6,6,5,4,4,5,7,4,4,6,6,6,4,6,6,4,6,7,5,6,6,5,6,6,5,5,4,5,5,5,5,6,6,6,7,5,5,6,8,6,6,7,8,5,6,5,6,6,6,6,4,6,8,5,6,5,5,6,7,5};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,7,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,8,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,9,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,12,13,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,6,8,14,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,7,8,20,24,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,7,10,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,15,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,10,11,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,13,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,9,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,8,12,22,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,33,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,19,26,31,32,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,18,25,34,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{24,25,29,37,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,6,16,18,32,34,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,33,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,14,19,36,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,7,16,18,19,26,28,30,34,35,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,14,38,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,19,27,33,39,43,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,7,13,31,32,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,9,17,18,30,42,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,15,20,35,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,10,11,14,16,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,16,21,25,28,41,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,13,16,26,41,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,15,20,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,16,17,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,14,19,34,39,40,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,17,21,28,29,30,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,9,10,17,45,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,3,7,9,13,14,26,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,26,38,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,11,13,35,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,24,27,50,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,22,28,34,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,12,15,21,29,41,48,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,20,21,23,28,30,32,33,39,40,47,52,57,60,64,-1,-1,-1,-1,-1,-1},
{4,10,14,15,22,24,27,33,38,42,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,8,10,14,21,49,60,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,13,14,35,45,58,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,7,11,19,31,32,40,56,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,30,32,34,57,60,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,12,19,20,31,32,52,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,13,17,22,24,25,27,30,32,40,46,48,49,68,72,73,-1,-1,-1,-1},
{1,21,25,31,35,51,60,68,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,13,14,18,21,28,32,44,47,49,51,58,67,73,-1,-1,-1,-1,-1,-1},
{3,9,11,23,30,38,39,45,54,55,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,11,31,35,37,42,48,64,65,66,69,71,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,25,36,41,46,59,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,4,10,14,16,18,22,28,33,36,38,47,52,55,64,65,70,-1,-1,-1},
{0,4,5,13,30,32,33,41,49,52,53,57,65,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,2,4,11,22,31,36,37,38,48,51,55,59,69,-1,-1,-1,-1,-1,-1},
{3,9,16,18,23,24,40,56,58,67,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,7,14,25,30,31,52,57,60,67,68,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,31,32,33,38,42,54,60,68,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,17,18,20,34,48,56,58,60,66,67,72,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,16,18,34,41,42,47,48,60,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,6,10,16,17,22,26,32,42,48,53,55,62,63,64,69,74,87,-1,-1},
{5,13,17,18,32,36,38,40,45,47,51,76,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,7,27,40,41,51,52,54,59,67,73,74,78,79,81,82,84,87,-1,-1},
{1,4,5,10,14,16,21,39,44,58,62,69,75,86,-1,-1,-1,-1,-1,-1,-1},
{11,16,20,25,27,35,57,63,66,69,75,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,8,14,20,27,42,44,58,72,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,23,27,31,33,37,42,47,53,56,57,70,84,-1,-1,-1,-1,-1,-1,-1,-1},
{9,27,31,42,45,51,54,57,60,61,62,64,67,69,78,-1,-1,-1,-1,-1,-1},
{15,18,21,27,36,46,60,63,70,76,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,8,11,12,25,36,41,45,48,49,50,55,58,61,63,67,74,82,83,87},
{4,16,32,41,43,46,57,58,62,71,78,81,83,84,87,-1,-1,-1,-1,-1,-1},
{1,7,14,15,26,41,43,44,46,63,64,77,85,86,-1,-1,-1,-1,-1,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
            &amp;&amp; cost' == 1</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
