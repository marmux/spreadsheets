<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 33;
const int numberOfTasks = 100;
const int numberOfMachines = 10;
const int maxDependencies = 15;
const int longestChain = 5;
const int globalChainSize[numberOfChains] = {5,5,5,3,3,3,5,3,5,4,2,3,5,4,3,2,4,2,5,2,4,3,3,2,1,2,2,2,2,2,1,1,2};
const int globalChains[numberOfChains][longestChain] = {
{0,11,25,82,97},
{1,64,72,81,91},
{2,27,40,58,89},
{3,83,95,-1,-1},
{4,80,90,-1,-1},
{5,59,85,-1,-1},
{6,24,68,76,92},
{7,47,86,-1,-1},
{8,36,73,87,96},
{9,62,66,88,-1},
{10,56,-1,-1,-1},
{12,79,93,-1,-1},
{13,42,51,61,75},
{14,43,54,99,-1},
{15,84,98,-1,-1},
{16,57,-1,-1,-1},
{17,26,48,94,-1},
{18,50,-1,-1,-1},
{19,29,39,55,74},
{20,32,-1,-1,-1},
{21,37,41,67,-1},
{22,60,70,-1,-1},
{23,52,65,-1,-1},
{28,78,-1,-1,-1},
{30,-1,-1,-1,-1},
{31,71,-1,-1,-1},
{33,63,-1,-1,-1},
{34,77,-1,-1,-1},
{35,44,-1,-1,-1},
{38,49,-1,-1,-1},
{45,-1,-1,-1,-1},
{46,-1,-1,-1,-1},
{53,69,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {11,8,9,7,10,6,10,8,6,15,12,8,12,5,16,11,10,12,11,4,11,9,9,11,10,11,14,9,10,11,8,11,8,8,15,13,13,5,16,11,7,7,15,9,5,12,11,6,12,9,13,14,11,14,11,13,12,11,11,14,13,7,11,10,12,14,11,10,7,6,12,7,8,7,9,16,12,9,16,8,14,16,12,15,12,13,11,12,8,6,14,9,10,10,7,18,12,12,9,13};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,11,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,17,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,7,9,11,15,16,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,20,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,11,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,8,17,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,11,17,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,18,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,16,26,29,34,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,8,11,12,17,27,28,-1,-1,-1,-1,-1,-1,-1,-1},
{9,13,26,29,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,8,13,22,23,29,37,-1,-1,-1,-1,-1,-1,-1},
{5,12,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,11,35,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,8,20,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,7,18,21,37,39,-1,-1,-1,-1,-1,-1,-1,-1},
{4,7,11,13,26,30,32,-1,-1,-1,-1,-1,-1,-1,-1},
{17,27,29,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,17,18,25,39,41,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,21,33,40,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,23,26,30,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{26,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,19,21,23,29,36,37,43,48,-1,-1,-1,-1,-1,-1},
{0,10,15,29,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,10,23,32,51,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,10,16,22,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,25,28,29,30,40,44,46,52,-1,-1,-1,-1,-1},
{4,5,7,11,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,10,13,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,11,13,16,51,52,53,-1,-1,-1,-1,-1,-1,-1,-1},
{2,9,12,25,26,27,50,-1,-1,-1,-1,-1,-1,-1,-1},
{22,33,42,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,2,10,11,12,14,16,33,42,44,46,-1,-1,-1},
{2,11,18,37,52,59,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,10,12,19,29,39,40,44,48,52,62,-1,-1,-1,-1},
{2,20,34,41,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,24,28,33,51,59,62,63,-1,-1,-1,-1,-1,-1,-1},
{10,12,28,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,20,35,48,53,60,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{24,31,45,51,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,25,26,27,33,39,43,45,64,-1,-1,-1,-1,-1,-1},
{15,20,25,27,36,48,57,62,69,-1,-1,-1,-1,-1,-1},
{5,7,9,34,41,55,67,68,-1,-1,-1,-1,-1,-1,-1},
{15,17,24,25,35,36,41,43,46,49,51,61,-1,-1,-1},
{11,17,21,24,32,45,68,-1,-1,-1,-1,-1,-1,-1,-1},
{13,31,34,38,46,49,52,-1,-1,-1,-1,-1,-1,-1,-1},
{15,21,28,31,33,40,45,51,-1,-1,-1,-1,-1,-1,-1},
{1,12,15,24,27,41,67,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,7,18,25,41,55,58,67,70,71,-1,-1,-1,-1},
{20,23,25,28,39,49,52,67,68,72,-1,-1,-1,-1,-1},
{0,2,3,5,25,63,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,10,14,16,25,27,29,39,40,45,48,54,55,67},
{1,12,15,21,30,39,47,58,74,-1,-1,-1,-1,-1,-1},
{1,11,13,15,27,42,59,66,-1,-1,-1,-1,-1,-1,-1},
{7,10,21,25,36,39,47,53,73,76,-1,-1,-1,-1,-1},
{9,16,28,30,31,34,37,42,59,73,76,-1,-1,-1,-1},
{12,21,22,25,32,36,37,52,53,59,66,74,-1,-1,-1},
{0,12,21,24,28,42,43,58,72,74,-1,-1,-1,-1,-1},
{8,22,27,42,44,72,73,77,80,-1,-1,-1,-1,-1,-1},
{10,24,59,65,72,79,81,-1,-1,-1,-1,-1,-1,-1,-1},
{40,48,69,76,78,81,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,35,57,68,72,75,79,-1,-1,-1,-1,-1,-1,-1,-1},
{6,31,32,48,71,76,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,7,9,19,27,50,56,63,74,82,83,88,-1,-1},
{48,87,93,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,11,39,44,45,47,61,82,83,-1,-1,-1,-1,-1,-1},
{18,21,28,33,59,64,84,94,-1,-1,-1,-1,-1,-1,-1},
{3,7,20,34,54,63,76,77,-1,-1,-1,-1,-1,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
            &amp;&amp; cost' == 1</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
