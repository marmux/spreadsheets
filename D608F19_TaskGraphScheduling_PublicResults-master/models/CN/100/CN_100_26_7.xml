<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 27;
const int numberOfTasks = 100;
const int numberOfMachines = 7;
const int maxDependencies = 21;
const int longestChain = 9;
const int globalChainSize[numberOfChains] = {7,3,6,9,4,8,6,4,5,2,4,4,3,2,4,5,2,3,4,5,3,2,1,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,1,53,55,62,68,91,-1,-1},
{2,78,96,-1,-1,-1,-1,-1,-1},
{3,63,71,81,86,94,-1,-1,-1},
{4,21,56,58,60,74,82,83,88},
{5,59,84,87,-1,-1,-1,-1,-1},
{6,12,70,76,89,93,97,99,-1},
{7,39,54,77,80,90,-1,-1,-1},
{8,66,75,98,-1,-1,-1,-1,-1},
{9,40,64,73,95,-1,-1,-1,-1},
{10,92,-1,-1,-1,-1,-1,-1,-1},
{11,49,79,85,-1,-1,-1,-1,-1},
{13,52,57,65,-1,-1,-1,-1,-1},
{14,42,72,-1,-1,-1,-1,-1,-1},
{15,51,-1,-1,-1,-1,-1,-1,-1},
{16,34,48,69,-1,-1,-1,-1,-1},
{17,24,33,36,44,-1,-1,-1,-1},
{18,28,-1,-1,-1,-1,-1,-1,-1},
{19,32,38,-1,-1,-1,-1,-1,-1},
{20,22,46,67,-1,-1,-1,-1,-1},
{23,25,30,35,47,-1,-1,-1,-1},
{26,37,45,-1,-1,-1,-1,-1,-1},
{27,61,-1,-1,-1,-1,-1,-1,-1},
{29,-1,-1,-1,-1,-1,-1,-1,-1},
{31,-1,-1,-1,-1,-1,-1,-1,-1},
{41,-1,-1,-1,-1,-1,-1,-1,-1},
{43,-1,-1,-1,-1,-1,-1,-1,-1},
{50,-1,-1,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {9,10,11,12,13,13,11,16,9,10,13,13,9,15,16,12,10,12,10,5,11,10,6,8,11,7,8,11,11,14,12,8,12,9,3,15,7,7,9,10,7,14,12,13,9,12,13,11,14,13,7,12,11,6,5,12,12,4,7,5,5,8,7,7,5,7,9,9,12,10,12,11,11,12,15,8,11,6,14,10,12,9,14,5,13,12,7,10,10,6,7,8,9,8,15,10,8,17,8,10};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,7,10,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,9,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,16,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,5,14,15,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,17,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,11,16,17,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,10,20,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,9,17,18,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,8,18,24,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,12,19,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,9,13,15,19,27,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,12,14,20,22,24,27,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,13,14,16,19,25,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,10,19,23,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,17,22,25,26,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,9,18,21,26,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,10,11,14,32,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,7,11,17,18,24,25,28,29,30,32,35,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,5,9,16,20,23,33,36,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,30,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,9,13,14,22,32,36,38,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,26,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,22,26,36,38,41,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,16,17,29,34,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,11,14,20,22,25,30,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,8,10,15,26,35,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,15,16,17,19,32,33,34,37,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,5,9,11,13,23,29,31,32,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,17,18,23,25,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,11,12,15,16,22,25,42,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,10,13,15,20,21,32,37,40,44,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,3,12,23,25,35,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,10,12,26,32,37,39,40,44,45,46,47,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,9,15,27,37,51,52,53,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,21,28,45,52,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,17,19,22,31,43,45,50,52,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,18,21,25,28,31,33,35,40,42,49,52,56,57,-1,-1,-1,-1,-1,-1},
{3,5,7,8,11,16,21,37,39,40,44,55,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,11,18,30,34,39,46,50,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,27,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,12,15,21,22,25,28,46,47,48,50,55,56,57,59,61,-1,-1,-1,-1,-1},
{0,2,3,6,8,12,16,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,28,40,42,59,62,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,14,16,23,26,29,43,46,57,58,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,8,11,16,18,20,27,28,39,42,45,46,52,60,-1,-1,-1,-1,-1,-1},
{6,7,9,21,35,46,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,19,20,22,25,31,33,53,57,59,60,62,67,-1,-1,-1,-1,-1,-1,-1,-1},
{9,12,15,19,23,24,30,36,37,44,45,48,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,12,29,31,34,36,43,44,52,59,66,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,7,10,15,18,20,23,29,39,49,51,55,60,63,65,68,69,-1,-1,-1},
{4,13,14,17,18,25,26,30,37,40,42,43,46,50,56,69,-1,-1,-1,-1,-1},
{15,16,21,27,29,31,48,51,52,60,63,64,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,15,22,31,33,36,49,53,54,55,60,61,65,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,7,8,17,26,27,30,31,32,36,46,50,51,66,-1,-1,-1,-1,-1,-1},
{5,8,17,19,30,43,44,47,55,59,66,70,73,-1,-1,-1,-1,-1,-1,-1,-1},
{3,16,24,32,33,35,39,40,41,46,51,54,56,66,-1,-1,-1,-1,-1,-1,-1},
{2,8,10,19,23,25,27,29,31,33,34,53,64,68,69,72,75,76,-1,-1,-1},
{22,24,26,35,42,49,62,68,69,72,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,16,23,27,33,42,44,47,61,67,70,72,77,78,-1,-1,-1,-1,-1,-1,-1},
{0,2,8,16,20,27,29,32,37,40,41,44,58,65,71,-1,-1,-1,-1,-1,-1},
{10,15,19,20,38,56,66,71,74,79,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,26,30,37,40,42,52,60,62,77,82,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,16,17,19,26,33,41,43,49,59,64,70,71,74,76,-1,-1,-1,-1,-1,-1},
{2,15,20,25,28,38,39,40,52,69,79,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,15,19,26,38,39,49,61,62,69,72,76,77,79,80,81,-1,-1,-1,-1},
{9,10,12,23,35,40,50,57,82,83,84,85,86,-1,-1,-1,-1,-1,-1,-1,-1},
{0,13,22,23,26,28,34,42,46,56,62,65,77,79,83,-1,-1,-1,-1,-1,-1},
{0,8,11,18,21,26,33,34,37,51,53,54,61,70,76,80,-1,-1,-1,-1,-1},
{10,14,24,30,37,43,44,45,48,61,62,67,70,72,77,80,83,-1,-1,-1,-1},
{1,17,18,22,23,29,33,35,40,42,43,62,68,71,72,86,-1,-1,-1,-1,-1},
{10,29,37,38,54,67,74,76,84,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,22,33,35,41,51,62,81,85,89,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,9,11,13,23,24,27,30,35,37,48,67,68,69,80,82,86,-1,-1,-1,-1},
{13,14,31,32,34,37,41,45,51,54,61,73,82,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,11,15,17,24,26,31,33,34,37,40,42,58,63,75,76,78,84,90,93},
{1,7,10,14,20,25,28,29,32,35,44,51,66,67,68,75,90,93,-1,-1,-1},
{4,13,15,22,27,28,32,35,42,43,46,50,56,57,61,75,-1,-1,-1,-1,-1},
{2,22,23,31,32,33,38,39,45,65,72,76,86,90,97,98,-1,-1,-1,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
            &amp;&amp; cost' == 1</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
