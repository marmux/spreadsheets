<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 34;
const int numberOfTasks = 100;
const int numberOfMachines = 7;
const int maxDependencies = 18;
const int longestChain = 7;
const int globalChainSize[numberOfChains] = {4,3,7,4,3,6,3,2,4,2,5,2,3,3,5,3,6,3,2,2,3,3,3,4,2,2,2,2,1,1,2,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,4,52,97,-1,-1,-1},
{1,84,85,-1,-1,-1,-1},
{2,8,10,19,22,61,94},
{3,79,83,99,-1,-1,-1},
{5,86,90,-1,-1,-1,-1},
{6,15,26,50,68,98,-1},
{7,24,73,-1,-1,-1,-1},
{9,75,-1,-1,-1,-1,-1},
{11,42,87,96,-1,-1,-1},
{12,91,-1,-1,-1,-1,-1},
{13,66,72,76,89,-1,-1},
{14,95,-1,-1,-1,-1,-1},
{16,38,60,-1,-1,-1,-1},
{17,48,80,-1,-1,-1,-1},
{18,33,35,44,63,-1,-1},
{20,71,92,-1,-1,-1,-1},
{21,36,51,58,67,81,-1},
{23,47,82,-1,-1,-1,-1},
{25,93,-1,-1,-1,-1,-1},
{27,56,-1,-1,-1,-1,-1},
{28,39,64,-1,-1,-1,-1},
{29,37,46,-1,-1,-1,-1},
{30,65,70,-1,-1,-1,-1},
{31,53,54,88,-1,-1,-1},
{32,55,-1,-1,-1,-1,-1},
{34,77,-1,-1,-1,-1,-1},
{40,69,-1,-1,-1,-1,-1},
{41,74,-1,-1,-1,-1,-1},
{43,-1,-1,-1,-1,-1,-1},
{45,-1,-1,-1,-1,-1,-1},
{49,78,-1,-1,-1,-1,-1},
{57,-1,-1,-1,-1,-1,-1},
{59,-1,-1,-1,-1,-1,-1},
{62,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {7,4,5,5,5,5,6,6,3,5,6,6,7,5,5,4,6,6,7,5,5,7,5,6,5,7,7,5,5,6,3,5,5,4,7,7,7,8,5,6,6,6,4,6,5,6,3,5,5,7,5,5,6,6,5,5,6,6,7,6,6,5,7,4,5,7,6,6,5,3,6,6,5,4,5,6,6,5,6,6,5,5,6,5,5,6,4,6,6,6,4,7,8,6,6,7,5,6,6,8};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,6,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,10,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,12,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,7,15,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,17,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,10,15,17,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,12,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,17,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,11,18,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,23,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,11,18,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,14,17,23,24,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,9,23,24,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,15,19,21,29,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,21,24,27,29,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,11,16,18,22,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,19,21,25,28,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,28,31,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,18,26,31,34,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,10,11,12,13,16,20,29,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{32,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,14,15,18,25,28,35,36,39,43,-1,-1,-1,-1,-1,-1,-1,-1},
{3,34,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,19,24,29,32,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,10,23,24,28,36,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,9,17,19,22,35,44,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,12,19,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,15,22,26,30,38,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,7,8,12,23,31,36,44,45,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,21,23,24,40,42,43,45,49,51,-1,-1,-1,-1,-1,-1,-1},
{2,7,11,18,31,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,15,17,32,35,40,48,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{24,31,32,35,38,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,11,19,25,27,35,40,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,10,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,8,32,33,40,41,43,47,50,51,54,-1,-1,-1,-1,-1,-1},
{6,8,14,29,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,21,24,30,33,38,52,53,59,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,10,13,18,19,22,32,48,50,57,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,16,27,49,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,10,16,17,28,29,31,37,38,40,44,45,46,53,59,-1,-1,-1},
{3,12,16,38,39,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,21,25,30,45,50,53,58,59,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,8,13,18,23,25,34,47,50,58,-1,-1,-1,-1,-1,-1,-1},
{11,17,25,27,29,38,50,58,59,66,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,7,8,13,15,29,30,41,50,56,-1,-1,-1,-1,-1,-1,-1},
{0,13,16,28,40,44,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,21,34,39,40,43,45,48,57,62,65,-1,-1,-1,-1,-1,-1},
{8,12,15,17,20,21,36,39,51,55,56,59,61,-1,-1,-1,-1,-1},
{7,13,14,16,21,26,31,46,50,58,66,-1,-1,-1,-1,-1,-1,-1},
{5,6,24,26,29,37,45,46,64,69,-1,-1,-1,-1,-1,-1,-1,-1},
{4,11,14,26,39,41,49,53,62,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,15,19,21,37,50,51,56,61,69,71,-1,-1,-1,-1,-1,-1,-1},
{9,10,13,21,23,26,29,40,43,53,59,67,72,74,-1,-1,-1,-1},
{3,8,11,27,34,38,48,59,62,74,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,17,34,47,49,53,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,8,24,41,45,47,54,58,70,73,75,76,-1,-1,-1,-1,-1},
{8,17,21,23,41,42,43,45,48,49,52,68,77,-1,-1,-1,-1,-1},
{5,10,34,39,52,67,77,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,19,41,46,47,58,66,76,77,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,27,29,37,40,42,51,55,60,63,74,79,-1,-1,-1,-1,-1},
{0,1,4,10,18,23,25,34,41,55,60,64,68,-1,-1,-1,-1,-1},
{2,6,10,14,18,25,29,30,42,52,56,58,83,84,-1,-1,-1,-1},
{0,1,5,14,25,27,31,39,49,58,62,64,71,79,81,-1,-1,-1},
{1,5,11,12,13,18,21,27,31,33,40,42,49,50,53,58,74,78},
{1,12,25,42,45,54,58,84,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,26,40,41,45,48,50,53,59,61,72,74,76,88,-1,-1,-1,-1},
{7,17,22,33,38,42,46,61,62,67,72,73,86,88,-1,-1,-1,-1},
{4,8,9,10,12,13,26,51,59,77,82,89,-1,-1,-1,-1,-1,-1},
{3,11,27,28,29,33,41,43,51,53,69,71,76,-1,-1,-1,-1,-1},
{1,3,25,28,30,33,35,58,59,71,-1,-1,-1,-1,-1,-1,-1,-1},
{1,10,21,36,40,41,56,61,82,86,92,93,-1,-1,-1,-1,-1,-1},
{3,7,10,14,17,24,41,42,54,62,63,-1,-1,-1,-1,-1,-1,-1},
{5,7,18,24,42,51,63,64,74,84,87,-1,-1,-1,-1,-1,-1,-1},
{2,4,28,30,44,45,51,52,54,60,62,68,77,79,82,-1,-1,-1},
{3,12,13,30,34,38,46,52,55,68,84,92,93,-1,-1,-1,-1,-1},
{6,20,26,32,38,41,54,55,59,66,70,73,74,79,83,90,91,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
            &amp;&amp; cost' == 1</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
