<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 37;
const int numberOfTasks = 100;
const int numberOfMachines = 11;
const int maxDependencies = 14;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {5,5,4,2,6,4,3,4,2,5,3,3,4,5,2,2,1,3,2,2,2,3,2,2,2,4,2,4,2,2,2,1,1,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,10,41,52,99,-1},
{1,14,21,80,84,-1},
{2,18,72,93,-1,-1},
{3,95,-1,-1,-1,-1},
{4,20,49,66,83,85},
{5,54,61,82,-1,-1},
{6,23,94,-1,-1,-1},
{7,55,70,91,-1,-1},
{8,79,-1,-1,-1,-1},
{9,46,53,67,89,-1},
{11,75,96,-1,-1,-1},
{12,35,62,-1,-1,-1},
{13,37,81,86,-1,-1},
{15,32,64,76,87,-1},
{16,71,-1,-1,-1,-1},
{17,73,-1,-1,-1,-1},
{19,-1,-1,-1,-1,-1},
{22,40,92,-1,-1,-1},
{24,68,-1,-1,-1,-1},
{25,63,-1,-1,-1,-1},
{26,56,-1,-1,-1,-1},
{27,44,78,-1,-1,-1},
{28,97,-1,-1,-1,-1},
{29,98,-1,-1,-1,-1},
{30,88,-1,-1,-1,-1},
{31,50,57,69,-1,-1},
{33,77,-1,-1,-1,-1},
{34,48,65,90,-1,-1},
{36,59,-1,-1,-1,-1},
{38,74,-1,-1,-1,-1},
{39,60,-1,-1,-1,-1},
{42,-1,-1,-1,-1,-1},
{43,-1,-1,-1,-1,-1},
{45,-1,-1,-1,-1,-1},
{47,-1,-1,-1,-1,-1},
{51,-1,-1,-1,-1,-1},
{58,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {4,2,4,4,5,1,8,7,2,3,10,1,1,16,1,2,6,5,3,2,2,30,2,7,7,6,10,5,2,1,4,11,2,2,1,5,1,3,18,6,4,17,15,8,7,10,4,1,1,15,2,1,1,13,7,2,7,2,11,19,1,10,5,2,1,6,17,3,2,12,2,9,2,8,4,5,1,1,1,9,4,8,5,10,2,1,5,2,12,4,1,5,5,1,2,5,12,4,3,1};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,4,5,9,11,19,-1,-1,-1,-1,-1,-1,-1},
{1,9,10,11,14,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,7,8,11,18,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,14,15,26,27,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,9,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,11,12,21,25,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,10,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,6,13,27,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,13,22,23,24,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,2,8,10,16,17,-1,-1,-1,-1,-1,-1,-1},
{14,31,37,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,22,27,30,33,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,14,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,9,17,25,26,-1,-1,-1,-1,-1,-1,-1,-1},
{25,31,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,23,24,28,34,39,-1,-1,-1,-1,-1,-1,-1,-1},
{1,11,14,20,26,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,17,21,31,43,-1,-1,-1,-1,-1,-1,-1,-1},
{28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,14,16,30,31,46,-1,-1,-1,-1,-1,-1,-1},
{1,4,5,12,15,24,29,38,-1,-1,-1,-1,-1,-1},
{3,4,7,9,17,18,19,33,34,40,44,-1,-1,-1},
{6,9,16,24,26,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,13,14,21,47,50,-1,-1,-1,-1,-1,-1,-1,-1},
{8,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{24,36,40,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,17,18,29,39,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,20,25,40,43,44,45,47,52,54,-1,-1,-1,-1},
{7,10,18,35,36,37,40,-1,-1,-1,-1,-1,-1,-1},
{9,11,25,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,9,17,29,32,36,37,46,-1,-1,-1,-1,-1,-1},
{10,22,24,48,60,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,17,26,33,44,49,60,-1,-1,-1,-1,-1,-1,-1},
{1,12,16,19,20,34,38,46,51,53,60,64,-1,-1},
{16,22,24,30,31,37,44,51,54,-1,-1,-1,-1,-1},
{4,18,24,41,57,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,11,23,33,46,52,55,62,-1,-1,-1,-1,-1,-1},
{11,14,16,26,39,52,58,-1,-1,-1,-1,-1,-1,-1},
{1,14,18,23,35,39,44,45,62,-1,-1,-1,-1,-1},
{16,17,23,32,41,44,57,-1,-1,-1,-1,-1,-1,-1},
{15,18,38,46,50,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,11,16,46,47,55,56,58,-1,-1,-1,-1,-1},
{2,7,21,42,53,64,-1,-1,-1,-1,-1,-1,-1,-1},
{2,23,28,30,33,36,-1,-1,-1,-1,-1,-1,-1,-1},
{17,21,44,50,53,55,58,69,-1,-1,-1,-1,-1,-1},
{8,9,15,23,25,32,45,47,70,-1,-1,-1,-1,-1},
{1,21,34,43,52,56,60,64,-1,-1,-1,-1,-1,-1},
{6,17,22,37,46,55,57,72,-1,-1,-1,-1,-1,-1},
{10,12,24,60,61,70,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,14,18,19,30,36,39,63,66,68,-1,-1,-1},
{7,16,22,24,30,63,80,-1,-1,-1,-1,-1,-1,-1},
{15,17,28,45,49,67,74,83,-1,-1,-1,-1,-1,-1},
{16,21,26,29,31,63,74,81,83,-1,-1,-1,-1,-1},
{17,25,28,31,50,56,76,-1,-1,-1,-1,-1,-1,-1},
{7,18,30,32,43,46,55,58,60,65,-1,-1,-1,-1},
{11,28,30,31,34,39,56,59,65,67,76,-1,-1,-1},
{8,47,51,65,75,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,15,25,31,65,70,72,-1,-1,-1,-1,-1,-1,-1},
{20,27,31,32,40,56,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,17,28,33,36,44,46,67,72,-1,-1,-1,-1},
{6,16,23,26,29,41,56,83,-1,-1,-1,-1,-1,-1},
{2,3,9,21,26,40,47,77,79,-1,-1,-1,-1,-1},
{11,12,15,17,21,24,26,32,39,53,75,-1,-1,-1},
{6,28,42,47,51,55,61,74,77,80,-1,-1,-1,-1},
{6,17,29,33,64,72,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,16,22,27,41,44,49,52,59,60,66,71,74}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
            &amp;&amp; cost' == 1</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
