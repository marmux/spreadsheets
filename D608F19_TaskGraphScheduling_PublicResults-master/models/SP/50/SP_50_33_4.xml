<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 26;
const int numberOfTasks = 50;
const int numberOfMachines = 4;
const int maxDependencies = 10;
const int longestChain = 4;
const int globalChainSize[numberOfChains] = {3,2,3,2,3,2,2,1,3,3,2,2,4,1,3,2,1,1,1,1,2,2,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,16,36,-1},
{1,30,-1,-1},
{2,19,49,-1},
{3,28,-1,-1},
{4,35,47,-1},
{5,48,-1,-1},
{6,34,-1,-1},
{7,-1,-1,-1},
{8,39,46,-1},
{9,33,41,-1},
{10,43,-1,-1},
{11,29,-1,-1},
{12,20,38,42},
{13,-1,-1,-1},
{14,23,31,-1},
{15,24,-1,-1},
{17,-1,-1,-1},
{18,-1,-1,-1},
{21,-1,-1,-1},
{22,-1,-1,-1},
{25,37,-1,-1},
{26,45,-1,-1},
{27,-1,-1,-1},
{32,-1,-1,-1},
{40,-1,-1,-1},
{44,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {10,2,9,1,6,2,7,4,4,7,2,8,4,10,7,9,3,2,6,10,5,3,8,8,4,3,2,8,6,10,7,10,6,4,6,7,2,10,1,2,4,7,1,6,6,9,8,10,9,4};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,7,8,-1,-1,-1,-1,-1,-1},
{3,12,15,-1,-1,-1,-1,-1,-1,-1},
{15,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,12,14,-1,-1,-1,-1,-1,-1,-1},
{2,14,15,-1,-1,-1,-1,-1,-1,-1},
{9,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,11,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,8,11,14,23,24,26,-1,-1},
{3,5,11,13,15,-1,-1,-1,-1,-1},
{1,4,14,16,25,-1,-1,-1,-1,-1},
{1,5,14,23,-1,-1,-1,-1,-1,-1},
{5,15,-1,-1,-1,-1,-1,-1,-1,-1},
{3,9,10,17,22,25,-1,-1,-1,-1},
{2,3,6,7,22,23,-1,-1,-1,-1},
{1,4,12,20,-1,-1,-1,-1,-1,-1},
{0,10,14,16,19,-1,-1,-1,-1,-1},
{25,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,15,20,-1,-1,-1,-1,-1,-1,-1},
{2,8,9,12,16,22,24,-1,-1,-1},
{6,23,-1,-1,-1,-1,-1,-1,-1,-1},
{9,22,33,-1,-1,-1,-1,-1,-1,-1},
{8,27,38,-1,-1,-1,-1,-1,-1,-1},
{10,18,39,-1,-1,-1,-1,-1,-1,-1},
{12,38,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,26,27,-1,-1,-1,-1,-1,-1},
{2,11,15,23,24,37,39,-1,-1,-1},
{8,17,24,29,35,37,-1,-1,-1,-1},
{4,5,9,16,20,25,27,33,38,39},
{12,19,31,34,-1,-1,-1,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
