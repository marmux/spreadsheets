<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 40;
const int numberOfTasks = 100;
const int numberOfMachines = 16;
const int maxDependencies = 14;
const int longestChain = 7;
const int globalChainSize[numberOfChains] = {7,4,2,5,3,2,4,2,5,2,4,5,2,1,3,6,1,2,3,3,2,4,1,4,1,2,1,4,1,1,3,2,1,1,1,1,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,1,26,30,37,58,85},
{2,54,67,73,-1,-1,-1},
{3,96,-1,-1,-1,-1,-1},
{4,48,69,77,98,-1,-1},
{5,18,97,-1,-1,-1,-1},
{6,99,-1,-1,-1,-1,-1},
{7,46,62,83,-1,-1,-1},
{8,90,-1,-1,-1,-1,-1},
{9,47,82,89,94,-1,-1},
{10,86,-1,-1,-1,-1,-1},
{11,36,50,91,-1,-1,-1},
{12,45,78,79,87,-1,-1},
{13,32,-1,-1,-1,-1,-1},
{14,-1,-1,-1,-1,-1,-1},
{15,44,92,-1,-1,-1,-1},
{16,38,39,42,49,66,-1},
{17,-1,-1,-1,-1,-1,-1},
{19,93,-1,-1,-1,-1,-1},
{20,29,55,-1,-1,-1,-1},
{21,60,88,-1,-1,-1,-1},
{22,81,-1,-1,-1,-1,-1},
{23,65,75,80,-1,-1,-1},
{24,-1,-1,-1,-1,-1,-1},
{25,53,68,71,-1,-1,-1},
{27,-1,-1,-1,-1,-1,-1},
{28,61,-1,-1,-1,-1,-1},
{31,-1,-1,-1,-1,-1,-1},
{33,43,56,74,-1,-1,-1},
{34,-1,-1,-1,-1,-1,-1},
{35,-1,-1,-1,-1,-1,-1},
{40,52,84,-1,-1,-1,-1},
{41,70,-1,-1,-1,-1,-1},
{51,-1,-1,-1,-1,-1,-1},
{57,-1,-1,-1,-1,-1,-1},
{59,-1,-1,-1,-1,-1,-1},
{63,-1,-1,-1,-1,-1,-1},
{64,-1,-1,-1,-1,-1,-1},
{72,-1,-1,-1,-1,-1,-1},
{76,-1,-1,-1,-1,-1,-1},
{95,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {6,7,5,14,9,17,12,10,14,10,9,8,12,8,8,16,9,6,10,13,9,9,12,9,11,11,15,10,14,13,11,9,10,14,14,9,11,14,6,9,14,12,6,5,5,9,12,12,12,6,9,11,5,12,7,12,8,17,11,12,10,12,10,8,13,9,11,17,11,7,11,9,8,11,9,14,7,12,12,10,8,14,10,11,8,11,14,7,11,3,9,8,13,14,11,11,12,6,11,9};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,6,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,20,21,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,22,26,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,24,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,11,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,22,25,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,16,18,19,35,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,34,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{33,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,15,28,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,29,36,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,7,8,38,40,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,9,29,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,12,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,26,29,42,45,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,12,13,25,32,36,42,45,-1,-1,-1,-1,-1,-1},
{8,28,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,23,29,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,13,23,26,47,48,-1,-1,-1,-1,-1,-1,-1,-1},
{18,29,33,41,46,52,-1,-1,-1,-1,-1,-1,-1,-1},
{5,29,43,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{26,35,37,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,21,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,28,41,46,51,60,-1,-1,-1,-1,-1,-1,-1,-1},
{2,37,46,51,52,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,21,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,16,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,35,45,48,60,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{26,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,48,52,54,58,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,21,39,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,37,48,60,62,66,-1,-1,-1,-1,-1,-1,-1,-1},
{2,21,41,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{30,39,56,68,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,37,43,52,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,24,29,44,46,48,52,56,60,65,67,-1,-1,-1},
{7,18,40,56,57,63,68,-1,-1,-1,-1,-1,-1,-1},
{15,35,48,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,9,23,29,30,36,40,53,69,-1,-1,-1,-1,-1},
{7,19,20,45,62,68,76,-1,-1,-1,-1,-1,-1,-1},
{40,57,78,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{75,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{22,28,35,45,72,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,10,14,19,38,47,66,70,-1,-1,-1,-1,-1},
{7,8,15,19,26,28,57,62,70,-1,-1,-1,-1,-1},
{43,52,57,65,68,69,-1,-1,-1,-1,-1,-1,-1,-1},
{1,45,58,67,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,10,17,61,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,13,35,45,76,79,-1,-1,-1,-1,-1,-1,-1,-1},
{4,24,31,45,60,69,-1,-1,-1,-1,-1,-1,-1,-1},
{17,23,26,43,46,59,70,82,-1,-1,-1,-1,-1,-1},
{4,8,13,14,19,29,48,74,-1,-1,-1,-1,-1,-1},
{0,12,41,50,51,82,-1,-1,-1,-1,-1,-1,-1,-1},
{26,44,56,64,65,71,-1,-1,-1,-1,-1,-1,-1,-1},
{19,26,28,39,52,60,80,84,-1,-1,-1,-1,-1,-1},
{10,22,33,35,43,62,72,78,89,-1,-1,-1,-1,-1},
{49,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,21,24,35,40,42,44,51,-1,-1,-1,-1,-1,-1},
{9,10,12,18,23,24,30,32,39,51,55,69,76,83},
{16,36,39,53,77,79,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,16,18,20,31,36,63,66,70,80,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
