<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 35;
const int numberOfTasks = 100;
const int numberOfMachines = 7;
const int maxDependencies = 15;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {4,4,4,5,3,4,2,6,3,4,2,3,3,6,5,3,3,2,4,4,2,3,3,2,2,2,2,1,1,2,2,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,27,33,88,-1,-1},
{1,28,71,95,-1,-1},
{2,47,56,86,-1,-1},
{3,44,64,72,99,-1},
{4,76,98,-1,-1,-1},
{5,80,84,94,-1,-1},
{6,92,-1,-1,-1,-1},
{7,29,42,52,74,96},
{8,70,87,-1,-1,-1},
{9,67,90,93,-1,-1},
{10,91,-1,-1,-1,-1},
{11,55,81,-1,-1,-1},
{12,65,69,-1,-1,-1},
{13,20,23,38,59,89},
{14,31,60,83,85,-1},
{15,78,97,-1,-1,-1},
{16,34,58,-1,-1,-1},
{17,73,-1,-1,-1,-1},
{18,22,66,79,-1,-1},
{19,25,68,82,-1,-1},
{21,46,-1,-1,-1,-1},
{24,54,77,-1,-1,-1},
{26,37,57,-1,-1,-1},
{30,35,-1,-1,-1,-1},
{32,61,-1,-1,-1,-1},
{36,50,-1,-1,-1,-1},
{39,62,-1,-1,-1,-1},
{40,-1,-1,-1,-1,-1},
{41,-1,-1,-1,-1,-1},
{43,53,-1,-1,-1,-1},
{45,75,-1,-1,-1,-1},
{48,-1,-1,-1,-1,-1},
{49,-1,-1,-1,-1,-1},
{51,-1,-1,-1,-1,-1},
{63,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {2,8,16,5,21,8,7,3,1,6,1,2,16,3,9,1,7,10,4,1,3,3,24,13,4,1,1,17,4,5,13,1,2,23,17,1,17,1,9,7,3,3,6,8,3,14,7,3,23,59,26,8,4,1,10,1,4,3,1,5,11,9,3,2,4,3,2,5,1,2,9,4,2,5,11,6,4,1,2,7,7,14,11,8,1,3,1,2,15,1,11,5,1,2,6,5,25,26,3,21};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,8,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,8,10,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,15,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,11,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,15,19,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,5,7,8,17,21,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,9,12,14,18,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,20,21,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,12,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,23,25,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,9,24,26,32,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,7,14,21,23,24,26,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,13,20,26,27,29,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,10,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,12,15,19,23,27,-1,-1,-1,-1,-1,-1,-1,-1},
{21,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,5,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,14,19,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,11,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,18,36,39,42,43,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{26,27,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,9,11,22,24,30,37,42,-1,-1,-1,-1,-1,-1,-1},
{5,11,24,27,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,18,21,24,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,11,16,33,44,48,51,53,-1,-1,-1,-1,-1,-1,-1},
{1,7,8,12,23,25,33,38,43,47,-1,-1,-1,-1,-1},
{18,31,34,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,12,23,24,34,35,50,-1,-1,-1,-1,-1,-1,-1,-1},
{22,34,36,38,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,23,31,32,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,12,21,24,26,32,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{39,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,16,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,18,27,31,32,44,45,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,11,12,14,15,28,35,37,50,-1,-1,-1,-1,-1},
{17,22,25,38,47,48,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,8,9,12,29,35,43,53,55,-1,-1,-1,-1,-1,-1},
{6,12,14,25,29,32,35,36,40,51,52,-1,-1,-1,-1},
{3,6,20,21,28,35,41,57,61,65,-1,-1,-1,-1,-1},
{2,5,7,8,20,21,27,54,59,-1,-1,-1,-1,-1,-1},
{1,11,16,21,28,33,45,58,-1,-1,-1,-1,-1,-1,-1},
{4,6,13,17,23,28,38,39,53,64,67,-1,-1,-1,-1},
{4,17,22,29,32,35,46,48,65,-1,-1,-1,-1,-1,-1},
{3,33,34,47,52,53,57,58,-1,-1,-1,-1,-1,-1,-1},
{45,55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,19,23,44,54,62,63,64,65,68,-1,-1,-1,-1,-1},
{1,34,37,48,49,54,57,63,-1,-1,-1,-1,-1,-1,-1},
{5,6,14,15,23,40,45,48,50,68,-1,-1,-1,-1,-1},
{14,21,28,29,46,66,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,11,20,27,29,36,44,57,59,63,-1,-1,-1,-1},
{3,9,12,37,49,50,52,55,56,61,68,-1,-1,-1,-1},
{2,34,36,37,55,62,68,-1,-1,-1,-1,-1,-1,-1,-1},
{12,13,18,25,30,37,48,60,-1,-1,-1,-1,-1,-1,-1},
{4,6,18,19,20,23,26,41,48,52,58,66,72,80,-1},
{6,17,31,57,58,62,65,83,-1,-1,-1,-1,-1,-1,-1},
{1,7,33,36,40,51,56,68,79,-1,-1,-1,-1,-1,-1},
{1,2,15,34,50,53,63,65,70,-1,-1,-1,-1,-1,-1},
{0,4,14,26,29,33,38,50,54,59,63,65,69,78,83},
{0,5,15,20,35,37,59,79,-1,-1,-1,-1,-1,-1,-1},
{3,19,27,28,41,67,77,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,8,10,32,41,45,47,63,68,78,-1,-1,-1,-1},
{6,26,30,33,56,59,60,68,80,85,91,-1,-1,-1,-1},
{10,16,18,24,27,41,68,75,81,89,90,-1,-1,-1,-1},
{3,19,20,27,40,48,52,60,61,65,82,84,-1,-1,-1},
{11,23,24,29,48,55,65,70,71,78,79,-1,-1,-1,-1},
{0,26,35,65,66,70,74,83,90,-1,-1,-1,-1,-1,-1},
{4,8,16,21,32,64,78,-1,-1,-1,-1,-1,-1,-1,-1},
{4,7,25,29,32,39,41,69,72,76,80,89,90,-1,-1},
{3,21,50,53,56,71,72,75,81,83,-1,-1,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
