<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 42;
const int numberOfTasks = 100;
const int numberOfMachines = 8;
const int maxDependencies = 13;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {6,5,3,3,2,4,4,3,3,2,4,3,3,5,2,3,2,4,1,2,2,1,2,4,3,1,2,3,2,3,1,1,2,1,1,1,1,1,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,15,34,41,52,75},
{1,36,61,81,95,-1},
{2,72,84,-1,-1,-1},
{3,87,93,-1,-1,-1},
{4,99,-1,-1,-1,-1},
{5,64,74,83,-1,-1},
{6,33,54,89,-1,-1},
{7,38,90,-1,-1,-1},
{8,86,97,-1,-1,-1},
{9,60,-1,-1,-1,-1},
{10,43,55,70,-1,-1},
{11,50,76,-1,-1,-1},
{12,71,82,-1,-1,-1},
{13,20,40,51,66,-1},
{14,42,-1,-1,-1,-1},
{16,46,96,-1,-1,-1},
{17,85,-1,-1,-1,-1},
{18,21,27,79,-1,-1},
{19,-1,-1,-1,-1,-1},
{22,80,-1,-1,-1,-1},
{23,59,-1,-1,-1,-1},
{24,-1,-1,-1,-1,-1},
{25,48,-1,-1,-1,-1},
{26,62,91,94,-1,-1},
{28,65,78,-1,-1,-1},
{29,-1,-1,-1,-1,-1},
{30,92,-1,-1,-1,-1},
{31,49,57,-1,-1,-1},
{32,39,-1,-1,-1,-1},
{35,53,77,-1,-1,-1},
{37,-1,-1,-1,-1,-1},
{44,-1,-1,-1,-1,-1},
{45,67,-1,-1,-1,-1},
{47,-1,-1,-1,-1,-1},
{56,-1,-1,-1,-1,-1},
{58,-1,-1,-1,-1,-1},
{63,-1,-1,-1,-1,-1},
{68,-1,-1,-1,-1,-1},
{69,-1,-1,-1,-1,-1},
{73,-1,-1,-1,-1,-1},
{88,-1,-1,-1,-1,-1},
{98,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {9,14,5,9,5,9,5,7,15,11,10,13,6,12,5,11,7,8,6,7,5,6,8,4,5,4,6,9,11,8,7,6,8,6,6,5,6,5,6,13,11,11,11,4,14,12,10,6,19,6,9,6,6,7,12,13,11,10,4,6,3,4,6,5,13,5,13,6,4,7,5,14,6,3,5,17,4,7,5,5,4,4,16,12,6,4,6,10,2,7,5,5,6,19,10,9,10,7,4,5};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,13,17,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,12,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,13,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,13,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,6,8,21,-1,-1,-1,-1,-1,-1,-1,-1},
{0,15,21,23,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,2,8,14,18,27,35,-1,-1,-1,-1,-1},
{5,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,12,16,20,-1,-1,-1,-1,-1,-1,-1,-1},
{11,25,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,13,20,21,28,-1,-1,-1,-1,-1,-1,-1,-1},
{23,25,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,14,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,10,23,24,29,-1,-1,-1,-1,-1,-1,-1},
{25,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,16,26,33,36,39,-1,-1,-1,-1,-1,-1,-1},
{9,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,14,25,33,37,-1,-1,-1,-1,-1,-1,-1,-1},
{1,22,25,31,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,9,11,12,35,-1,-1,-1,-1,-1,-1,-1},
{4,13,20,23,30,40,-1,-1,-1,-1,-1,-1,-1},
{38,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{35,41,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,22,33,41,44,-1,-1,-1,-1,-1,-1,-1,-1},
{19,21,24,40,43,-1,-1,-1,-1,-1,-1,-1,-1},
{5,31,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{22,26,46,49,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,33,34,49,-1,-1,-1,-1,-1,-1,-1,-1},
{3,12,16,25,26,36,41,44,-1,-1,-1,-1,-1},
{6,14,25,26,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,22,27,31,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,5,6,8,13,30,31,47,48,51,-1,-1},
{0,26,28,33,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,47,48,50,51,-1,-1,-1,-1,-1,-1,-1},
{12,17,45,51,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,12,30,49,55,57,69,-1,-1,-1,-1,-1,-1},
{5,9,12,20,28,41,47,61,63,68,-1,-1,-1},
{2,18,25,26,46,50,58,61,62,-1,-1,-1,-1},
{4,5,50,62,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,15,39,51,59,64,68,-1,-1,-1,-1,-1,-1},
{11,28,30,52,67,-1,-1,-1,-1,-1,-1,-1,-1},
{5,9,38,48,50,51,-1,-1,-1,-1,-1,-1,-1},
{53,54,63,65,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,17,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,10,27,44,-1,-1,-1,-1,-1,-1,-1,-1},
{10,11,12,22,51,59,-1,-1,-1,-1,-1,-1,-1},
{1,23,52,54,55,61,64,66,-1,-1,-1,-1,-1},
{8,41,71,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,37,44,73,74,76,80,-1,-1,-1,-1,-1,-1},
{9,28,57,69,72,-1,-1,-1,-1,-1,-1,-1,-1},
{9,17,19,64,81,-1,-1,-1,-1,-1,-1,-1,-1},
{8,24,46,50,64,69,72,-1,-1,-1,-1,-1,-1},
{1,3,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,14,15,16,51,54,81,-1,-1,-1,-1,-1,-1},
{4,13,15,37,38,63,68,-1,-1,-1,-1,-1,-1},
{3,13,16,54,56,62,77,-1,-1,-1,-1,-1,-1},
{30,39,55,68,77,-1,-1,-1,-1,-1,-1,-1,-1},
{11,17,21,55,63,82,83,87,90,-1,-1,-1,-1},
{12,45,63,71,77,91,-1,-1,-1,-1,-1,-1,-1},
{1,22,26,32,35,49,52,56,59,66,79,81,-1},
{7,45,46,65,78,88,-1,-1,-1,-1,-1,-1,-1},
{9,16,36,39,52,61,63,65,80,86,91,-1,-1},
{0,45,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,4,22,33,50,51,53,64,65,67,76,77}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
