<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 38;
const int numberOfTasks = 100;
const int numberOfMachines = 5;
const int maxDependencies = 15;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {4,6,4,3,2,4,4,4,3,3,2,2,3,4,4,3,3,2,3,4,3,5,3,3,2,1,2,1,1,3,1,2,1,1,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,14,46,88,-1,-1},
{1,20,26,72,81,93},
{2,40,75,86,-1,-1},
{3,43,92,-1,-1,-1},
{4,84,-1,-1,-1,-1},
{5,33,48,76,-1,-1},
{6,32,44,89,-1,-1},
{7,55,79,98,-1,-1},
{8,62,82,-1,-1,-1},
{9,58,90,-1,-1,-1},
{10,85,-1,-1,-1,-1},
{11,96,-1,-1,-1,-1},
{12,52,97,-1,-1,-1},
{13,29,49,95,-1,-1},
{15,56,69,91,-1,-1},
{16,74,94,-1,-1,-1},
{17,59,73,-1,-1,-1},
{18,71,-1,-1,-1,-1},
{19,61,87,-1,-1,-1},
{21,45,66,78,-1,-1},
{22,38,60,-1,-1,-1},
{23,37,68,77,99,-1},
{24,67,70,-1,-1,-1},
{25,39,53,-1,-1,-1},
{27,54,-1,-1,-1,-1},
{28,-1,-1,-1,-1,-1},
{30,65,-1,-1,-1,-1},
{31,-1,-1,-1,-1,-1},
{34,-1,-1,-1,-1,-1},
{35,42,64,-1,-1,-1},
{36,-1,-1,-1,-1,-1},
{41,50,-1,-1,-1,-1},
{47,-1,-1,-1,-1,-1},
{51,-1,-1,-1,-1,-1},
{57,-1,-1,-1,-1,-1},
{63,-1,-1,-1,-1,-1},
{80,-1,-1,-1,-1,-1},
{83,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {8,10,8,5,8,4,9,4,10,3,5,10,4,3,6,6,1,1,1,7,5,1,7,4,6,7,6,3,1,3,5,9,2,5,4,7,9,2,3,5,1,7,8,1,1,9,7,10,10,3,1,3,9,2,9,5,3,7,9,9,2,7,9,5,9,3,10,4,7,3,9,6,6,6,9,3,6,8,5,4,4,9,3,7,1,4,8,2,10,5,8,1,4,4,9,4,6,8,2,8};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,5,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,11,13,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,12,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,6,10,13,18,20,28,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,20,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,21,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,11,23,28,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,22,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,24,25,30,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,17,26,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,23,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,17,19,26,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,13,15,27,29,32,-1,-1,-1,-1,-1,-1,-1,-1},
{10,19,21,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,14,29,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,18,31,33,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,11,17,28,29,36,-1,-1,-1,-1,-1,-1,-1,-1},
{6,27,37,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,26,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,12,17,28,35,36,44,-1,-1,-1,-1,-1,-1,-1,-1},
{6,21,30,34,36,39,50,-1,-1,-1,-1,-1,-1,-1,-1},
{10,12,13,27,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,7,27,35,40,49,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,10,15,16,24,32,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{44,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,20,25,32,35,37,39,45,-1,-1,-1,-1,-1,-1},
{6,8,13,15,17,18,37,39,-1,-1,-1,-1,-1,-1,-1},
{3,5,17,38,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,19,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,9,16,33,37,42,44,-1,-1,-1,-1,-1,-1,-1,-1},
{3,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,17,22,25,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,15,24,27,30,31,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,15,21,28,38,45,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,9,20,24,27,34,-1,-1,-1,-1,-1,-1,-1,-1},
{12,16,35,37,38,42,55,64,65,-1,-1,-1,-1,-1,-1},
{24,32,42,44,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,52,54,67,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,18,31,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,25,26,29,30,38,50,53,60,-1,-1,-1,-1,-1,-1},
{8,12,15,17,20,23,25,41,45,59,-1,-1,-1,-1,-1},
{9,10,12,16,17,37,41,57,-1,-1,-1,-1,-1,-1,-1},
{1,4,12,40,47,54,55,59,67,-1,-1,-1,-1,-1,-1},
{5,7,16,21,32,34,36,48,49,-1,-1,-1,-1,-1,-1},
{23,38,41,65,68,75,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,24,37,44,47,63,66,68,-1,-1,-1,-1,-1,-1,-1},
{7,8,32,35,46,49,52,54,55,73,-1,-1,-1,-1,-1},
{17,26,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,14,37,38,72,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,13,16,28,38,47,60,62,63,71,-1,-1,-1,-1},
{3,10,17,79,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,18,43,44,53,58,63,75,-1,-1,-1,-1,-1,-1,-1},
{7,10,13,22,26,29,41,78,79,-1,-1,-1,-1,-1,-1},
{8,14,22,24,34,37,38,43,51,53,55,66,67,75,76},
{6,27,31,34,37,38,57,61,63,74,78,80,-1,-1,-1},
{14,16,23,27,34,35,36,40,46,48,59,64,65,71,76},
{1,44,45,48,56,60,68,73,79,-1,-1,-1,-1,-1,-1},
{6,20,35,41,55,56,57,58,-1,-1,-1,-1,-1,-1,-1},
{6,10,22,24,35,40,53,55,59,67,69,-1,-1,-1,-1},
{17,18,20,24,43,46,47,60,70,71,73,77,-1,-1,-1},
{10,12,29,31,38,41,55,78,81,-1,-1,-1,-1,-1,-1},
{0,7,21,32,38,54,74,78,-1,-1,-1,-1,-1,-1,-1},
{4,7,18,19,20,36,37,49,55,57,60,67,-1,-1,-1},
{3,8,11,43,45,78,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,30,35,44,51,52,56,59,60,79,-1,-1,-1,-1,-1},
{4,13,25,34,43,45,64,72,79,-1,-1,-1,-1,-1,-1},
{1,17,29,37,42,43,64,77,-1,-1,-1,-1,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
