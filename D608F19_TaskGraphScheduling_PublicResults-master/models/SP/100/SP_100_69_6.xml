<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 25;
const int numberOfTasks = 100;
const int numberOfMachines = 6;
const int maxDependencies = 16;
const int longestChain = 8;
const int globalChainSize[numberOfChains] = {8,4,5,6,3,4,8,4,5,7,4,5,5,6,4,4,2,3,1,4,2,3,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,2,8,63,64,83,86,92},
{1,17,87,96,-1,-1,-1,-1},
{3,51,69,85,99,-1,-1,-1},
{4,49,61,71,93,98,-1,-1},
{5,52,94,-1,-1,-1,-1,-1},
{6,88,91,95,-1,-1,-1,-1},
{7,9,24,27,60,65,75,81},
{10,11,38,90,-1,-1,-1,-1},
{12,18,54,74,80,-1,-1,-1},
{13,14,58,59,67,84,89,-1},
{15,72,82,97,-1,-1,-1,-1},
{16,30,48,62,77,-1,-1,-1},
{19,35,42,44,68,-1,-1,-1},
{20,22,25,34,70,79,-1,-1},
{21,55,56,73,-1,-1,-1,-1},
{23,37,39,78,-1,-1,-1,-1},
{26,29,-1,-1,-1,-1,-1,-1},
{28,36,47,-1,-1,-1,-1,-1},
{31,-1,-1,-1,-1,-1,-1,-1},
{32,41,46,53,-1,-1,-1,-1},
{33,40,-1,-1,-1,-1,-1,-1},
{43,50,66,-1,-1,-1,-1,-1},
{45,-1,-1,-1,-1,-1,-1,-1},
{57,-1,-1,-1,-1,-1,-1,-1},
{76,-1,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {8,8,4,7,13,17,13,14,2,10,4,9,16,3,13,16,17,10,5,20,14,18,8,19,9,3,16,17,5,6,11,16,3,14,1,13,2,19,12,7,16,13,19,20,5,17,5,5,10,8,4,18,6,4,12,17,13,6,7,10,13,16,13,10,10,1,6,8,10,15,9,9,19,5,15,18,13,6,5,18,9,9,2,20,18,18,2,3,8,17,11,16,3,15,13,17,8,5,11,6};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,7,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,9,10,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,10,12,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,9,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,17,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,11,13,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,11,13,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,15,17,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,21,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,13,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,20,22,26,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,8,16,21,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,14,15,19,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,15,28,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,14,20,25,27,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,10,12,13,19,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,15,22,24,26,28,33,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,23,24,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,6,11,15,28,33,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,28,36,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,14,16,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,18,32,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,17,35,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,23,35,36,40,41,42,-1,-1,-1,-1,-1,-1,-1,-1},
{30,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{38,41,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,21,32,36,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,11,16,19,30,37,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,4,11,20,26,32,33,43,44,-1,-1,-1,-1,-1,-1},
{8,13,33,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,3,6,12,15,41,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,5,33,34,43,44,47,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,13,24,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,14,17,18,25,33,34,35,42,43,45,-1,-1,-1,-1},
{2,21,34,37,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,16,37,45,50,55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,27,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,7,14,20,23,30,34,40,-1,-1,-1,-1,-1,-1,-1},
{1,16,36,43,45,48,58,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,10,11,20,24,27,32,33,38,45,-1,-1,-1,-1,-1,-1},
{3,17,24,27,31,37,47,48,49,55,-1,-1,-1,-1,-1,-1},
{5,19,29,33,42,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,8,22,30,47,50,62,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,4,5,7,23,40,49,63,-1,-1,-1,-1,-1,-1,-1},
{3,9,11,31,35,40,52,59,60,-1,-1,-1,-1,-1,-1,-1},
{4,5,44,46,50,57,62,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{22,36,38,43,59,65,66,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,10,30,36,42,44,45,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,20,26,44,45,50,51,60,63,66,68,-1,-1,-1,-1,-1},
{1,14,18,21,34,39,41,46,63,-1,-1,-1,-1,-1,-1,-1},
{8,12,14,24,50,59,61,69,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,15,16,26,38,43,65,-1,-1,-1,-1,-1,-1,-1,-1},
{2,11,21,23,31,46,56,59,-1,-1,-1,-1,-1,-1,-1,-1},
{46,54,66,70,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,15,19,46,47,61,65,72,73,-1,-1,-1,-1,-1,-1},
{25,50,54,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,14,15,41,49,62,70,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,26,39,50,75,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,30,32,36,37,49,64,70,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,18,26,30,44,58,74,-1,-1,-1,-1,-1,-1,-1,-1},
{3,11,17,31,58,62,65,75,80,-1,-1,-1,-1,-1,-1,-1},
{17,18,36,55,72,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,16,23,31,44,51,64,66,70,-1,-1,-1,-1,-1,-1},
{18,30,35,51,56,61,67,68,74,-1,-1,-1,-1,-1,-1,-1},
{1,3,14,20,28,32,43,61,68,69,82,-1,-1,-1,-1,-1},
{5,6,7,8,12,13,15,45,54,74,83,-1,-1,-1,-1,-1},
{1,3,10,14,17,32,55,64,65,67,71,72,82,85,-1,-1},
{4,5,6,7,15,18,27,54,60,66,87,-1,-1,-1,-1,-1},
{46,74,84,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,12,23,38,47,48,58,63,75,79,-1,-1,-1,-1,-1},
{10,19,23,24,28,29,32,42,44,47,62,67,88,90,-1,-1},
{8,12,45,50,55,63,71,77,86,-1,-1,-1,-1,-1,-1,-1},
{8,16,23,27,31,34,39,45,50,60,61,71,78,-1,-1,-1},
{7,14,30,34,38,49,51,52,64,65,80,89,90,-1,-1,-1},
{0,21,26,66,81,90,91,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,24,29,37,53,55,59,60,63,69,72,73,84,86,87,-1},
{28,34,52,82,86,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,11,26,28,39,40,44,47,52,57,70,75,81,82,87,93},
{13,24,32,34,35,40,41,49,53,63,80,83,85,88,91,95}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
