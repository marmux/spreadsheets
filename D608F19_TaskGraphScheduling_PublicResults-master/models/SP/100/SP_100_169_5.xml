<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 42;
const int numberOfTasks = 100;
const int numberOfMachines = 5;
const int maxDependencies = 12;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {6,3,5,3,5,2,2,3,3,4,1,2,3,2,2,2,5,3,3,3,3,2,1,5,3,2,2,2,1,1,1,2,1,1,2,1,2,2,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,37,46,54,61,78},
{1,18,90,-1,-1,-1},
{2,40,48,71,97,-1},
{3,34,98,-1,-1,-1},
{4,11,36,49,81,-1},
{5,91,-1,-1,-1,-1},
{6,96,-1,-1,-1,-1},
{7,59,84,-1,-1,-1},
{8,79,88,-1,-1,-1},
{9,38,53,95,-1,-1},
{10,-1,-1,-1,-1,-1},
{12,94,-1,-1,-1,-1},
{13,87,99,-1,-1,-1},
{14,83,-1,-1,-1,-1},
{15,57,-1,-1,-1,-1},
{16,68,-1,-1,-1,-1},
{17,24,72,86,93,-1},
{19,42,64,-1,-1,-1},
{20,62,73,-1,-1,-1},
{21,31,75,-1,-1,-1},
{22,47,58,-1,-1,-1},
{23,89,-1,-1,-1,-1},
{25,-1,-1,-1,-1,-1},
{26,35,51,63,85,-1},
{27,44,55,-1,-1,-1},
{28,70,-1,-1,-1,-1},
{29,80,-1,-1,-1,-1},
{30,69,-1,-1,-1,-1},
{32,-1,-1,-1,-1,-1},
{33,-1,-1,-1,-1,-1},
{39,-1,-1,-1,-1,-1},
{41,77,-1,-1,-1,-1},
{43,-1,-1,-1,-1,-1},
{45,-1,-1,-1,-1,-1},
{50,65,-1,-1,-1,-1},
{52,-1,-1,-1,-1,-1},
{56,67,-1,-1,-1,-1},
{60,82,-1,-1,-1,-1},
{66,-1,-1,-1,-1,-1},
{74,-1,-1,-1,-1,-1},
{76,-1,-1,-1,-1,-1},
{92,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {2,8,1,5,9,10,10,12,1,4,13,8,16,3,1,6,7,11,4,1,9,2,3,10,4,8,2,15,10,3,8,18,1,13,9,11,9,18,6,1,9,20,10,5,7,8,9,2,9,11,3,6,2,6,8,9,13,2,1,6,8,6,8,3,9,20,6,9,8,6,10,7,6,18,16,2,10,7,10,6,2,17,10,3,10,19,5,12,9,20,4,2,7,20,4,20,8,6,8,3};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,4,17,18,26,27,-1,-1,-1,-1,-1},
{4,26,31,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,17,19,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,9,13,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,19,22,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,4,22,27,40,42,-1,-1,-1,-1,-1},
{9,11,29,36,39,-1,-1,-1,-1,-1,-1,-1},
{0,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{24,35,47,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{28,31,38,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,21,46,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,15,44,45,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,21,35,46,49,-1,-1,-1,-1,-1,-1,-1},
{12,13,47,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,7,49,52,56,-1,-1,-1,-1,-1,-1,-1},
{23,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,35,37,54,-1,-1,-1,-1,-1,-1,-1,-1},
{12,20,22,47,49,-1,-1,-1,-1,-1,-1,-1},
{11,12,44,45,51,-1,-1,-1,-1,-1,-1,-1},
{12,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,20,50,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{49,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{28,30,32,37,-1,-1,-1,-1,-1,-1,-1,-1},
{3,32,48,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,21,24,44,56,-1,-1,-1,-1,-1,-1,-1},
{36,39,62,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,24,31,50,56,66,67,-1,-1,-1,-1,-1},
{12,72,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,41,43,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,20,61,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,8,13,15,30,35,45,-1,-1,-1,-1,-1},
{29,31,43,52,63,67,-1,-1,-1,-1,-1,-1},
{18,19,22,25,33,39,46,49,-1,-1,-1,-1},
{1,17,60,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,21,23,27,35,40,53,57,62,63,69,80},
{5,7,27,33,59,77,-1,-1,-1,-1,-1,-1},
{26,32,49,53,55,63,-1,-1,-1,-1,-1,-1},
{4,32,49,50,70,72,-1,-1,-1,-1,-1,-1},
{9,13,17,28,53,56,72,-1,-1,-1,-1,-1},
{7,26,28,41,58,68,79,-1,-1,-1,-1,-1},
{5,8,23,67,70,-1,-1,-1,-1,-1,-1,-1},
{8,17,18,24,46,54,65,-1,-1,-1,-1,-1},
{5,6,8,20,34,55,57,64,-1,-1,-1,-1},
{34,87,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{28,43,46,62,67,76,86,-1,-1,-1,-1,-1},
{0,12,41,71,-1,-1,-1,-1,-1,-1,-1,-1},
{9,15,25,32,48,53,56,65,83,-1,-1,-1},
{6,20,49,61,69,72,-1,-1,-1,-1,-1,-1},
{21,37,40,68,71,72,-1,-1,-1,-1,-1,-1},
{18,34,65,68,79,89,-1,-1,-1,-1,-1,-1},
{2,22,59,60,67,73,77,83,87,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
