<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 30;
const int numberOfTasks = 100;
const int numberOfMachines = 9;
const int maxDependencies = 21;
const int longestChain = 7;
const int globalChainSize[numberOfChains] = {6,4,3,2,2,7,4,3,6,3,3,5,3,3,3,4,2,2,2,2,5,4,2,4,4,3,2,2,4,1};
const int globalChains[numberOfChains][longestChain] = {
{0,1,29,81,97,98,-1},
{2,77,89,99,-1,-1,-1},
{3,91,96,-1,-1,-1,-1},
{4,90,-1,-1,-1,-1,-1},
{5,94,-1,-1,-1,-1,-1},
{6,49,70,84,85,87,95},
{7,51,76,83,-1,-1,-1},
{8,22,80,-1,-1,-1,-1},
{9,52,53,62,73,86,-1},
{10,78,82,-1,-1,-1,-1},
{11,88,93,-1,-1,-1,-1},
{12,17,36,61,79,-1,-1},
{13,59,65,-1,-1,-1,-1},
{14,72,75,-1,-1,-1,-1},
{15,40,92,-1,-1,-1,-1},
{16,41,57,71,-1,-1,-1},
{18,58,-1,-1,-1,-1,-1},
{19,63,-1,-1,-1,-1,-1},
{20,42,-1,-1,-1,-1,-1},
{21,56,-1,-1,-1,-1,-1},
{23,26,32,66,68,-1,-1},
{24,54,67,74,-1,-1,-1},
{25,69,-1,-1,-1,-1,-1},
{27,38,43,44,-1,-1,-1},
{28,48,55,64,-1,-1,-1},
{30,45,60,-1,-1,-1,-1},
{31,50,-1,-1,-1,-1,-1},
{33,47,-1,-1,-1,-1,-1},
{34,35,37,46,-1,-1,-1},
{39,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {1,11,4,11,2,9,1,13,3,13,6,6,43,4,23,3,3,11,13,7,15,3,9,3,11,10,9,27,83,2,9,17,11,32,6,2,7,14,7,1,1,9,8,7,19,3,2,10,30,8,5,42,3,7,3,8,1,10,2,8,6,9,1,8,9,6,7,6,4,4,1,11,2,1,4,6,3,7,6,2,3,22,6,5,6,6,2,3,29,23,10,7,1,21,1,8,5,8,11,4};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,9,10,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,13,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,5,8,11,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,17,20,22,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,12,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,11,14,18,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,10,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,9,15,19,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,10,20,25,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,14,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,8,12,21,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,8,11,14,17,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,27,31,35,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,5,14,19,26,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,27,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,15,19,25,29,36,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,9,16,17,27,32,33,38,39,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,12,14,18,20,22,24,32,35,36,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,19,22,26,27,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,10,21,22,32,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,12,17,18,30,34,38,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,10,13,17,20,30,37,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,9,14,23,26,27,33,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,9,10,12,19,27,28,37,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,6,9,18,24,33,37,38,41,44,47,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,11,18,23,28,31,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,7,20,40,42,46,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,5,8,9,11,19,25,26,33,37,43,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,7,10,16,22,24,34,38,50,52,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,11,14,24,29,31,34,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,13,18,22,29,34,40,47,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,14,20,21,23,28,29,30,36,39,47,52,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,12,13,23,25,26,29,33,36,41,48,50,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,11,17,18,25,26,38,40,41,43,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,8,13,16,24,27,34,39,51,52,56,57,-1,-1,-1,-1,-1,-1,-1,-1},
{8,11,14,15,23,28,35,37,45,52,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,15,17,18,22,24,31,35,36,37,39,45,53,55,57,58,-1,-1,-1,-1},
{6,8,9,12,28,34,36,52,53,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,16,18,19,20,22,33,39,40,41,44,54,60,-1,-1,-1,-1,-1,-1,-1,-1},
{15,17,25,30,37,43,45,48,55,57,60,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,16,21,35,36,48,50,55,56,58,59,61,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,11,19,20,21,22,27,28,32,50,59,64,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,24,25,41,53,54,59,60,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,20,25,28,40,53,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,12,17,19,25,44,46,50,52,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,11,15,19,20,23,28,29,30,45,49,53,54,58,62,63,65,68,-1,-1},
{6,10,11,13,20,34,50,55,57,58,66,69,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,13,14,16,17,23,26,35,44,47,53,54,70,-1,-1,-1,-1,-1,-1,-1,-1},
{11,14,18,25,32,39,42,44,55,58,60,61,62,63,-1,-1,-1,-1,-1,-1,-1},
{6,8,10,17,27,35,43,45,47,50,60,61,67,69,-1,-1,-1,-1,-1,-1,-1},
{16,20,30,38,48,52,56,59,63,64,71,72,74,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,6,8,13,16,18,23,32,51,54,64,68,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,2,6,9,20,26,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,10,14,18,20,22,33,37,39,42,44,47,50,55,58,68,74,76,-1,-1},
{0,11,17,20,24,27,33,45,48,52,58,61,72,76,-1,-1,-1,-1,-1,-1,-1},
{3,6,8,9,11,13,22,25,28,29,37,39,44,52,60,65,71,-1,-1,-1,-1},
{0,1,4,12,19,22,24,26,28,29,39,57,61,68,70,71,74,-1,-1,-1,-1},
{0,24,25,32,34,35,38,42,50,56,60,68,74,78,-1,-1,-1,-1,-1,-1,-1},
{1,18,22,31,32,35,37,43,49,59,67,71,76,80,-1,-1,-1,-1,-1,-1,-1},
{5,17,25,30,45,50,55,61,70,76,82,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,23,33,48,59,68,69,74,83,84,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,15,20,22,34,38,53,55,56,63,70,72,73,-1,-1,-1,-1,-1,-1,-1,-1},
{11,13,14,23,25,30,31,35,40,51,59,69,83,84,85,-1,-1,-1,-1,-1,-1},
{2,5,10,11,12,14,16,21,50,60,68,73,79,81,-1,-1,-1,-1,-1,-1,-1},
{19,43,52,65,66,71,77,81,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,9,20,21,29,44,45,47,62,66,78,81,86,-1,-1,-1,-1,-1,-1,-1},
{1,3,5,7,9,33,36,43,45,50,51,55,64,71,81,-1,-1,-1,-1,-1,-1},
{9,12,15,20,24,40,46,47,53,56,58,60,63,88,-1,-1,-1,-1,-1,-1,-1},
{20,22,24,30,33,34,36,52,58,68,71,84,88,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,6,21,23,24,28,29,31,35,36,65,67,69,73,76,89,-1,-1,-1,-1},
{33,34,36,40,55,69,71,73,74,76,79,80,82,87,89,93,-1,-1,-1,-1,-1},
{8,25,26,27,29,33,38,43,46,48,52,65,66,79,91,-1,-1,-1,-1,-1,-1},
{0,1,17,18,19,21,25,26,46,47,55,67,74,75,81,90,-1,-1,-1,-1,-1},
{4,6,7,8,23,24,25,32,34,43,49,54,61,77,79,91,93,97,-1,-1,-1},
{1,4,5,22,29,36,50,51,53,56,58,71,73,75,76,79,89,91,92,93,94}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
