<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 35;
const int numberOfTasks = 100;
const int numberOfMachines = 2;
const int maxDependencies = 16;
const int longestChain = 7;
const int globalChainSize[numberOfChains] = {7,6,5,2,2,4,3,3,2,4,4,5,4,2,2,3,2,3,2,5,2,3,3,3,2,2,5,1,1,2,1,2,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,1,51,74,91,96,99},
{2,59,73,81,88,97,-1},
{3,60,63,66,82,-1,-1},
{4,79,-1,-1,-1,-1,-1},
{5,95,-1,-1,-1,-1,-1},
{6,33,48,90,-1,-1,-1},
{7,17,75,-1,-1,-1,-1},
{8,78,98,-1,-1,-1,-1},
{9,89,-1,-1,-1,-1,-1},
{10,28,35,84,-1,-1,-1},
{11,72,76,83,-1,-1,-1},
{12,16,50,65,85,-1,-1},
{13,37,55,71,-1,-1,-1},
{14,93,-1,-1,-1,-1,-1},
{15,86,-1,-1,-1,-1,-1},
{18,44,49,-1,-1,-1,-1},
{19,56,-1,-1,-1,-1,-1},
{20,25,47,-1,-1,-1,-1},
{21,68,-1,-1,-1,-1,-1},
{22,64,69,80,87,-1,-1},
{23,92,-1,-1,-1,-1,-1},
{24,58,70,-1,-1,-1,-1},
{26,42,46,-1,-1,-1,-1},
{27,41,62,-1,-1,-1,-1},
{29,43,-1,-1,-1,-1,-1},
{30,94,-1,-1,-1,-1,-1},
{31,36,40,54,61,-1,-1},
{32,-1,-1,-1,-1,-1,-1},
{34,-1,-1,-1,-1,-1,-1},
{38,77,-1,-1,-1,-1,-1},
{39,-1,-1,-1,-1,-1,-1},
{45,52,-1,-1,-1,-1,-1},
{53,-1,-1,-1,-1,-1,-1},
{57,-1,-1,-1,-1,-1,-1},
{67,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {2,9,2,5,1,6,3,9,3,9,4,5,8,4,4,4,3,10,9,9,1,10,5,9,8,7,2,9,9,6,8,1,5,3,10,4,6,5,4,5,6,7,8,4,7,6,6,1,9,9,6,5,9,3,5,7,10,1,3,5,7,7,3,8,7,10,2,2,8,8,3,1,9,1,1,4,5,7,1,2,5,3,1,1,6,7,7,1,3,4,5,9,3,9,1,5,2,7,8,7};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,7,11,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,12,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,17,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,8,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,11,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,13,17,18,19,22,27,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,21,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,14,20,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,10,12,20,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,10,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,25,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,11,12,13,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,17,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,15,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,12,26,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,10,20,23,27,32,34,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,14,23,26,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,13,19,21,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,13,14,18,22,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,9,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,22,25,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,19,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,18,33,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,16,28,30,31,32,44,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,16,22,34,36,38,48,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,22,33,42,43,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{28,31,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,42,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,20,40,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,29,37,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,12,14,16,19,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,13,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{24,25,38,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,3,4,13,18,30,39,42,-1,-1,-1,-1,-1,-1,-1},
{0,3,30,36,37,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,40,44,50,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,25,28,34,41,52,53,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,14,15,54,58,60,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,14,22,29,33,60,61,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,13,14,33,36,44,50,53,-1,-1,-1,-1,-1,-1,-1},
{13,41,44,52,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,12,13,21,35,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,15,27,41,61,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,39,46,57,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,15,36,55,57,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,21,22,24,33,52,57,59,65,70,-1,-1,-1,-1,-1,-1},
{1,8,19,26,55,59,60,62,-1,-1,-1,-1,-1,-1,-1,-1},
{0,26,46,47,51,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,17,42,44,45,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,42,68,70,72,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,13,36,38,64,67,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,8,9,11,22,24,27,33,41,55,64,67,-1,-1,-1},
{0,2,4,12,15,19,49,52,55,71,-1,-1,-1,-1,-1,-1},
{16,18,28,30,38,40,41,43,55,61,69,-1,-1,-1,-1,-1},
{13,21,22,28,34,56,59,73,78,-1,-1,-1,-1,-1,-1,-1},
{12,14,49,59,66,71,72,76,79,-1,-1,-1,-1,-1,-1,-1},
{16,19,27,36,51,55,60,64,72,76,77,80,-1,-1,-1,-1},
{12,35,48,50,54,65,66,71,72,-1,-1,-1,-1,-1,-1,-1},
{2,55,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,9,15,24,35,38,57,64,-1,-1,-1,-1,-1,-1,-1,-1},
{24,25,27,33,41,53,80,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,12,16,22,23,42,48,49,52,57,58,67,78,81,85},
{5,7,9,20,25,27,37,52,83,-1,-1,-1,-1,-1,-1,-1},
{1,19,21,24,30,32,34,48,50,51,57,-1,-1,-1,-1,-1},
{3,27,51,56,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,23,33,39,60,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,8,13,14,22,30,31,32,44,46,49,51,-1,-1,-1,-1},
{30,44,65,76,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,11,16,28,34,57,58,68,73,89,-1,-1,-1,-1,-1},
{1,8,17,22,24,28,35,43,52,64,66,74,86,91,-1,-1},
{15,18,29,84,85,88,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,43,73,78,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,14,18,23,56,77,83,90,96,-1,-1,-1,-1,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
