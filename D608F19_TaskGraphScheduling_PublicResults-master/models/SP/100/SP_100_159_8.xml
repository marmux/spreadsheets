<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 42;
const int numberOfTasks = 100;
const int numberOfMachines = 8;
const int maxDependencies = 7;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {3,6,2,4,5,4,2,3,2,1,2,5,2,6,3,4,4,2,1,2,2,1,3,2,1,3,1,5,2,1,3,2,1,1,1,1,2,1,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,73,82,-1,-1,-1},
{1,25,38,74,93,94},
{2,97,-1,-1,-1,-1},
{3,11,46,95,-1,-1},
{4,36,43,44,91,-1},
{5,71,92,99,-1,-1},
{6,81,-1,-1,-1,-1},
{7,63,89,-1,-1,-1},
{8,78,-1,-1,-1,-1},
{9,-1,-1,-1,-1,-1},
{10,85,-1,-1,-1,-1},
{12,52,75,90,96,-1},
{13,84,-1,-1,-1,-1},
{14,27,57,59,65,76},
{15,37,45,-1,-1,-1},
{16,26,29,87,-1,-1},
{17,21,39,61,-1,-1},
{18,86,-1,-1,-1,-1},
{19,-1,-1,-1,-1,-1},
{20,83,-1,-1,-1,-1},
{22,54,-1,-1,-1,-1},
{23,-1,-1,-1,-1,-1},
{24,56,66,-1,-1,-1},
{28,49,-1,-1,-1,-1},
{30,-1,-1,-1,-1,-1},
{31,32,80,-1,-1,-1},
{33,-1,-1,-1,-1,-1},
{34,40,42,47,69,-1},
{35,64,-1,-1,-1,-1},
{41,-1,-1,-1,-1,-1},
{48,53,88,-1,-1,-1},
{50,77,-1,-1,-1,-1},
{51,-1,-1,-1,-1,-1},
{55,-1,-1,-1,-1,-1},
{58,-1,-1,-1,-1,-1},
{60,-1,-1,-1,-1,-1},
{62,70,-1,-1,-1,-1},
{67,-1,-1,-1,-1,-1},
{68,-1,-1,-1,-1,-1},
{72,-1,-1,-1,-1,-1},
{79,-1,-1,-1,-1,-1},
{98,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {1,22,2,1,11,7,2,16,19,11,4,1,13,1,13,14,10,8,10,3,22,1,35,4,4,5,8,6,8,9,2,5,10,1,2,12,4,2,12,28,18,1,1,1,4,1,2,12,10,7,4,1,25,6,1,5,1,21,49,6,5,4,3,4,1,2,1,16,5,48,9,25,2,5,44,1,18,10,1,1,8,5,11,7,3,5,20,5,9,3,6,13,2,4,7,1,7,1,19,3};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{7,17,-1,-1,-1,-1,-1},
{16,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{14,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1},
{3,16,-1,-1,-1,-1,-1},
{6,14,24,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{15,26,28,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1},
{31,-1,-1,-1,-1,-1,-1},
{17,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{4,12,20,-1,-1,-1,-1},
{8,15,-1,-1,-1,-1,-1},
{13,25,27,30,-1,-1,-1},
{21,-1,-1,-1,-1,-1,-1},
{34,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1},
{1,40,-1,-1,-1,-1,-1},
{3,13,32,36,41,-1,-1},
{9,10,33,34,43,-1,-1},
{25,33,37,-1,-1,-1,-1},
{7,8,11,14,32,-1,-1},
{39,42,-1,-1,-1,-1,-1},
{25,-1,-1,-1,-1,-1,-1},
{28,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{2,12,-1,-1,-1,-1,-1},
{7,48,50,-1,-1,-1,-1},
{22,-1,-1,-1,-1,-1,-1},
{34,-1,-1,-1,-1,-1,-1},
{13,24,47,-1,-1,-1,-1},
{27,33,56,-1,-1,-1,-1},
{7,18,-1,-1,-1,-1,-1},
{4,31,37,50,57,58,-1},
{26,29,-1,-1,-1,-1,-1},
{2,18,39,-1,-1,-1,-1},
{48,-1,-1,-1,-1,-1,-1},
{6,7,62,-1,-1,-1,-1},
{35,41,-1,-1,-1,-1,-1},
{42,47,59,61,64,-1,-1},
{33,41,56,-1,-1,-1,-1},
{28,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{47,-1,-1,-1,-1,-1,-1},
{62,-1,-1,-1,-1,-1,-1},
{3,5,9,14,-1,-1,-1},
{26,-1,-1,-1,-1,-1,-1},
{0,26,40,-1,-1,-1,-1},
{38,39,-1,-1,-1,-1,-1},
{24,50,52,58,-1,-1,-1},
{37,52,57,65,-1,-1,-1},
{8,50,-1,-1,-1,-1,-1},
{8,38,45,54,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{7,32,40,68,-1,-1,-1},
{4,6,21,-1,-1,-1,-1},
{63,73,-1,-1,-1,-1,-1},
{4,6,20,30,32,62,-1},
{4,13,14,-1,-1,-1,-1},
{10,61,69,-1,-1,-1,-1},
{7,18,40,42,44,51,55},
{16,29,41,44,-1,-1,-1},
{10,53,-1,-1,-1,-1,-1},
{17,63,80,-1,-1,-1,-1},
{39,66,67,75,-1,-1,-1},
{4,29,30,44,66,69,-1},
{69,71,72,-1,-1,-1,-1},
{32,62,73,74,83,-1,-1},
{43,93,-1,-1,-1,-1,-1},
{32,46,47,66,-1,-1,-1},
{14,16,58,75,90,-1,-1},
{2,9,35,73,81,-1,-1},
{-1,-1,-1,-1,-1,-1,-1},
{8,13,52,62,69,92,98}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
