<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 28;
const int numberOfTasks = 100;
const int numberOfMachines = 3;
const int maxDependencies = 20;
const int longestChain = 10;
const int globalChainSize[numberOfChains] = {10,5,2,8,2,3,5,3,2,2,3,5,5,5,3,5,2,5,3,2,5,3,2,3,3,1,2,1};
const int globalChains[numberOfChains][longestChain] = {
{0,3,8,18,61,63,66,82,90,99},
{1,57,67,88,93,-1,-1,-1,-1,-1},
{2,72,-1,-1,-1,-1,-1,-1,-1,-1},
{4,19,25,34,55,92,95,96,-1,-1},
{5,98,-1,-1,-1,-1,-1,-1,-1,-1},
{6,69,79,-1,-1,-1,-1,-1,-1,-1},
{7,24,43,78,81,-1,-1,-1,-1,-1},
{9,36,83,-1,-1,-1,-1,-1,-1,-1},
{10,97,-1,-1,-1,-1,-1,-1,-1,-1},
{11,91,-1,-1,-1,-1,-1,-1,-1,-1},
{12,33,94,-1,-1,-1,-1,-1,-1,-1},
{13,58,65,73,74,-1,-1,-1,-1,-1},
{14,38,42,60,76,-1,-1,-1,-1,-1},
{15,41,47,62,85,-1,-1,-1,-1,-1},
{16,70,75,-1,-1,-1,-1,-1,-1,-1},
{17,32,44,48,56,-1,-1,-1,-1,-1},
{20,89,-1,-1,-1,-1,-1,-1,-1,-1},
{21,54,64,84,86,-1,-1,-1,-1,-1},
{22,51,87,-1,-1,-1,-1,-1,-1,-1},
{23,71,-1,-1,-1,-1,-1,-1,-1,-1},
{26,29,50,53,80,-1,-1,-1,-1,-1},
{27,39,77,-1,-1,-1,-1,-1,-1,-1},
{28,46,-1,-1,-1,-1,-1,-1,-1,-1},
{30,52,68,-1,-1,-1,-1,-1,-1,-1},
{31,35,59,-1,-1,-1,-1,-1,-1,-1},
{37,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{40,49,-1,-1,-1,-1,-1,-1,-1,-1},
{45,-1,-1,-1,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {6,5,5,6,5,6,6,6,5,5,5,4,5,5,5,5,7,5,6,6,6,6,5,7,6,5,5,5,4,5,6,5,8,4,6,4,6,5,4,5,6,6,6,5,5,5,6,6,8,7,5,4,5,5,5,5,7,4,5,6,5,6,5,6,5,5,4,6,4,6,4,6,7,6,4,5,6,7,6,7,4,6,5,7,5,4,5,5,5,5,4,6,6,6,7,6,6,7,5,6};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,11,12,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,8,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,4,15,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,11,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,16,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,14,17,18,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,10,14,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,13,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,9,10,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,13,19,21,25,26,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,19,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,14,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,14,17,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,12,13,19,24,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,14,15,21,25,27,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,12,17,21,23,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,6,9,16,28,30,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,9,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,11,13,14,15,20,21,24,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,25,27,28,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,13,15,19,29,30,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,14,18,19,26,28,33,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,7,13,17,21,24,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,12,32,33,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,20,27,33,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,28,37,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,9,11,15,33,37,39,41,44,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,17,19,27,39,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,12,26,40,41,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{29,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,22,32,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,19,21,30,35,39,40,43,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,26,34,36,46,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,11,15,19,21,42,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,8,13,17,21,25,30,34,42,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,7,11,13,20,30,31,36,38,46,48,54,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,2,3,5,9,34,38,40,44,45,49,50,55,56,-1,-1,-1,-1,-1},
{0,11,13,15,17,24,33,34,38,39,40,44,46,-1,-1,-1,-1,-1,-1,-1},
{13,21,26,30,35,42,43,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,12,14,17,22,23,34,35,42,47,58,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,5,9,15,17,18,29,33,35,38,39,50,-1,-1,-1,-1,-1,-1,-1},
{11,20,21,23,33,46,47,60,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,13,15,33,34,35,61,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,33,34,48,49,52,54,55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,20,24,31,32,33,38,44,58,62,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,12,16,17,18,19,24,26,31,33,39,52,55,62,63,-1,-1,-1,-1,-1},
{3,4,5,8,17,20,22,30,31,39,52,55,56,57,65,-1,-1,-1,-1,-1},
{37,42,45,52,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,6,16,20,25,29,38,42,44,50,68,-1,-1,-1,-1,-1,-1,-1,-1},
{10,12,16,20,23,29,34,37,43,44,51,54,-1,-1,-1,-1,-1,-1,-1,-1},
{0,23,33,37,39,43,48,53,68,70,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,13,15,16,21,22,25,37,38,49,50,61,63,64,68,-1,-1,-1,-1},
{2,3,7,22,28,29,32,37,47,51,53,58,65,-1,-1,-1,-1,-1,-1,-1},
{9,10,13,19,22,35,42,44,45,46,51,59,67,70,73,-1,-1,-1,-1,-1},
{14,15,26,33,38,43,44,50,70,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,6,27,31,39,48,52,60,61,68,75,-1,-1,-1,-1,-1,-1,-1,-1},
{6,13,14,25,39,42,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,22,24,37,43,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,13,17,21,24,50,65,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,13,27,33,53,64,68,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{46,49,51,55,59,60,62,67,75,78,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,8,12,13,15,19,22,31,37,39,42,52,57,66,75,77,-1,-1,-1,-1},
{9,21,31,36,37,42,43,45,46,49,59,60,62,67,68,69,-1,-1,-1,-1},
{28,36,38,39,40,41,42,43,46,52,64,73,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,27,36,38,41,42,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,10,14,33,39,42,49,84,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,11,29,40,44,49,51,53,64,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,24,25,31,40,42,51,53,54,58,63,66,67,68,72,80,83,86,-1,-1},
{8,20,26,28,33,37,38,42,53,59,60,71,-1,-1,-1,-1,-1,-1,-1,-1},
{4,9,20,21,25,27,28,35,40,48,51,59,60,61,62,66,67,69,82,-1},
{0,11,20,24,26,28,32,36,40,47,50,52,55,56,85,-1,-1,-1,-1,-1},
{1,2,7,15,17,21,29,31,44,46,55,60,61,62,64,69,77,79,83,-1},
{4,9,10,17,31,35,36,41,44,49,80,84,88,-1,-1,-1,-1,-1,-1,-1},
{6,8,26,27,33,34,35,36,37,38,49,60,62,64,65,82,89,-1,-1,-1},
{2,18,20,21,24,26,31,32,35,39,42,50,56,60,63,71,81,92,94,-1},
{6,16,20,23,24,29,35,42,44,55,56,60,63,82,83,85,94,95,-1,-1},
{10,15,22,24,42,43,45,50,51,55,59,64,82,89,-1,-1,-1,-1,-1,-1},
{1,5,13,36,37,61,70,74,78,79,81,82,86,97,-1,-1,-1,-1,-1,-1},
{8,14,17,22,24,27,28,30,40,48,56,58,61,73,74,81,90,91,95,98}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
