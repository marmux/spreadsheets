<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 34;
const int numberOfTasks = 100;
const int numberOfMachines = 16;
const int maxDependencies = 15;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {6,3,5,4,2,3,4,4,6,3,3,3,5,4,4,3,4,5,3,5,2,2,2,2,2,3,1,1,1,1,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,21,36,43,46,98},
{1,59,76,-1,-1,-1},
{2,24,60,78,96,-1},
{3,31,90,94,-1,-1},
{4,95,-1,-1,-1,-1},
{5,54,83,-1,-1,-1},
{6,20,39,88,-1,-1},
{7,30,56,99,-1,-1},
{8,50,66,74,89,91},
{9,75,92,-1,-1,-1},
{10,63,84,-1,-1,-1},
{11,64,93,-1,-1,-1},
{12,29,45,52,79,-1},
{13,57,65,82,-1,-1},
{14,72,86,97,-1,-1},
{15,44,62,-1,-1,-1},
{16,42,53,68,-1,-1},
{17,48,58,73,85,-1},
{18,38,87,-1,-1,-1},
{19,40,47,55,70,-1},
{22,81,-1,-1,-1,-1},
{23,77,-1,-1,-1,-1},
{25,69,-1,-1,-1,-1},
{26,67,-1,-1,-1,-1},
{27,32,-1,-1,-1,-1},
{28,49,61,-1,-1,-1},
{33,-1,-1,-1,-1,-1},
{34,-1,-1,-1,-1,-1},
{35,-1,-1,-1,-1,-1},
{37,-1,-1,-1,-1,-1},
{41,-1,-1,-1,-1,-1},
{51,-1,-1,-1,-1,-1},
{71,-1,-1,-1,-1,-1},
{80,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {1,8,6,8,2,4,2,8,4,3,2,7,3,10,5,17,1,6,4,11,1,2,2,11,16,1,8,9,1,9,11,10,6,9,6,5,5,5,16,55,5,3,7,2,1,4,1,18,1,8,17,11,23,4,9,4,1,3,14,14,9,10,1,5,7,5,1,5,7,1,6,4,11,17,12,6,2,11,7,7,26,3,12,1,4,6,15,3,6,2,8,3,2,7,8,15,13,26,30,3};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,11,12,20,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,7,11,17,23,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,3,5,9,10,18,19,22,23,-1,-1,-1,-1,-1},
{0,13,16,22,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,17,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,10,11,18,21,26,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,23,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,14,17,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,8,10,13,20,24,-1,-1,-1,-1,-1,-1,-1,-1},
{9,11,13,16,19,33,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,15,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,14,16,26,29,31,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,13,20,23,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,13,15,16,20,28,-1,-1,-1,-1,-1,-1,-1,-1},
{5,7,16,17,21,25,29,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,21,35,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,15,28,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,17,20,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,18,19,28,39,44,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,17,18,36,39,42,-1,-1,-1,-1,-1,-1,-1,-1},
{1,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,32,38,45,47,50,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,15,19,21,29,32,42,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,7,20,27,37,43,-1,-1,-1,-1,-1,-1,-1,-1},
{11,14,15,23,47,50,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,25,28,30,36,51,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,13,19,20,30,38,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,13,25,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,12,15,34,36,39,41,43,54,55,-1,-1,-1,-1},
{7,24,39,41,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,35,49,52,57,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,16,22,28,39,43,44,58,-1,-1,-1,-1,-1,-1,-1},
{8,10,12,23,30,37,43,52,54,-1,-1,-1,-1,-1,-1},
{4,5,11,13,23,24,33,45,53,55,-1,-1,-1,-1,-1},
{1,2,25,30,33,42,48,57,-1,-1,-1,-1,-1,-1,-1},
{7,11,14,15,36,37,50,-1,-1,-1,-1,-1,-1,-1,-1},
{11,25,26,52,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,13,19,20,26,31,53,58,-1,-1,-1,-1,-1,-1,-1},
{2,17,18,19,25,28,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,15,25,31,47,51,55,-1,-1,-1,-1,-1,-1,-1,-1},
{13,28,36,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,14,16,21,32,33,40,43,44,52,55,-1,-1,-1,-1},
{4,29,30,54,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,19,27,31,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,9,10,11,16,24,25,26,30,35,37,42,-1,-1,-1},
{0,30,44,50,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,11,18,23,33,41,44,67,-1,-1,-1,-1,-1,-1,-1},
{0,3,8,20,49,56,60,62,-1,-1,-1,-1,-1,-1,-1},
{12,31,40,52,53,60,61,66,68,-1,-1,-1,-1,-1,-1},
{3,6,15,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,13,22,45,53,60,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,18,20,29,32,35,47,62,65,67,70,72,75,-1,-1},
{1,3,23,25,49,54,57,-1,-1,-1,-1,-1,-1,-1,-1},
{9,18,27,41,44,50,51,63,67,79,-1,-1,-1,-1,-1},
{4,7,18,19,22,27,28,45,47,71,73,-1,-1,-1,-1},
{7,36,40,44,49,55,65,72,77,-1,-1,-1,-1,-1,-1},
{12,13,16,18,38,61,81,-1,-1,-1,-1,-1,-1,-1,-1},
{20,22,33,38,39,42,47,48,54,58,60,65,-1,-1,-1},
{10,13,20,42,43,47,48,55,57,64,66,73,74,-1,-1},
{16,19,24,28,31,44,52,59,64,-1,-1,-1,-1,-1,-1},
{0,10,16,34,47,51,59,63,77,87,89,-1,-1,-1,-1},
{0,2,16,27,28,29,32,37,69,75,80,87,-1,-1,-1},
{11,13,20,23,27,58,64,65,73,89,-1,-1,-1,-1,-1},
{3,4,7,66,82,89,90,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,10,16,31,32,41,44,47,52,58,67,81,83,-1},
{10,18,21,23,40,42,43,65,69,74,78,83,-1,-1,-1},
{1,19,26,40,67,86,89,-1,-1,-1,-1,-1,-1,-1,-1},
{32,34,44,45,46,48,51,52,63,64,66,74,75,76,84},
{15,17,27,35,48,51,56,60,74,82,85,-1,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
