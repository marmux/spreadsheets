<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 36;
const int numberOfTasks = 100;
const int numberOfMachines = 5;
const int maxDependencies = 22;
const int longestChain = 5;
const int globalChainSize[numberOfChains] = {4,3,3,5,4,4,2,5,4,3,4,3,2,2,3,3,2,2,2,4,3,5,4,2,2,2,1,3,3,2,2,2,2,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,8,50,99,-1},
{1,78,89,-1,-1},
{2,67,87,-1,-1},
{3,39,62,65,97},
{4,37,57,92,-1},
{5,49,83,86,-1},
{6,88,-1,-1,-1},
{7,16,60,82,91},
{9,23,52,79,-1},
{10,77,96,-1,-1},
{11,24,29,85,-1},
{12,33,68,-1,-1},
{13,98,-1,-1,-1},
{14,72,-1,-1,-1},
{15,76,94,-1,-1},
{17,26,69,-1,-1},
{18,93,-1,-1,-1},
{19,80,-1,-1,-1},
{20,59,-1,-1,-1},
{21,58,74,95,-1},
{22,32,81,-1,-1},
{25,48,66,84,90},
{27,34,61,70,-1},
{28,73,-1,-1,-1},
{30,55,-1,-1,-1},
{31,54,-1,-1,-1},
{35,-1,-1,-1,-1},
{36,47,63,-1,-1},
{38,51,75,-1,-1},
{40,45,-1,-1,-1},
{41,71,-1,-1,-1},
{42,56,-1,-1,-1},
{43,64,-1,-1,-1},
{44,-1,-1,-1,-1},
{46,-1,-1,-1,-1},
{53,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {3,2,16,10,16,19,8,18,5,5,17,15,15,11,8,4,13,9,2,3,2,4,17,4,2,13,11,7,10,20,18,19,18,1,2,20,9,19,9,12,7,12,7,8,12,1,17,15,15,14,1,4,12,13,15,3,4,3,20,10,17,15,7,8,6,8,6,12,10,10,11,8,19,19,7,7,19,12,7,20,1,11,10,15,4,11,4,19,7,2,20,5,2,6,11,13,18,16,9,16};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,9,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,10,11,14,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,14,15,16,17,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,7,9,17,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,5,16,18,24,27,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,9,11,17,20,22,25,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,5,12,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,9,14,27,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,12,17,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,11,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,5,7,8,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,18,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,3,5,12,14,15,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,12,23,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,10,16,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,13,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,9,33,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,21,23,25,32,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,36,39,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,11,12,34,36,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,10,18,20,22,24,25,27,30,36,46,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,5,6,14,18,24,27,28,37,41,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,7,8,14,30,38,43,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,15,17,20,25,33,38,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,4,5,11,15,19,20,23,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,19,34,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,24,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,14,29,30,42,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,13,14,36,41,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,8,16,21,27,30,31,33,35,37,38,39,45,-1,-1,-1,-1,-1,-1,-1,-1},
{13,21,26,28,35,39,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,15,16,20,30,35,37,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,3,5,12,16,29,31,34,38,55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,12,22,23,34,38,42,51,52,55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,3,15,23,24,39,40,41,44,48,54,55,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,29,38,42,47,49,51,52,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,16,31,42,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,7,8,17,21,22,25,29,34,40,43,46,53,57,62,-1,-1,-1,-1,-1,-1},
{16,19,25,31,32,33,48,52,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,8,25,26,28,31,32,45,51,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,10,11,19,23,31,33,34,41,53,55,60,61,63,-1,-1,-1,-1,-1,-1,-1,-1},
{8,10,12,14,26,38,44,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,29,30,34,41,45,48,60,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,17,18,24,25,41,49,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,11,14,21,29,30,33,40,48,57,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,15,24,28,37,38,42,61,62,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,13,15,19,32,35,41,42,43,55,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,10,20,51,61,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,14,15,24,25,35,38,39,40,52,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,21,27,29,35,36,37,38,39,42,47,50,60,61,64,66,71,-1,-1,-1,-1,-1},
{0,1,2,7,8,13,19,25,32,42,49,63,75,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,10,11,12,34,36,39,44,50,52,64,66,68,72,76,-1,-1,-1,-1,-1,-1},
{10,14,18,19,31,35,37,38,44,45,48,50,51,64,71,-1,-1,-1,-1,-1,-1,-1},
{5,9,10,19,26,32,34,36,41,45,48,60,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,8,10,13,18,20,25,26,27,37,45,47,48,58,60,66,70,-1,-1,-1,-1},
{2,4,6,10,11,20,27,29,37,38,43,48,49,63,71,76,-1,-1,-1,-1,-1,-1},
{0,4,20,24,33,46,47,52,55,66,73,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,10,17,22,26,29,32,38,44,46,52,55,61,66,71,72,82,-1,-1,-1,-1},
{8,10,13,17,25,27,32,36,42,45,48,49,62,64,72,73,74,76,80,81,83,84},
{10,15,22,24,25,26,28,33,34,37,41,43,45,67,69,75,-1,-1,-1,-1,-1,-1},
{0,3,5,6,12,14,24,32,33,44,46,53,54,62,63,70,81,82,-1,-1,-1,-1},
{0,9,16,17,23,33,55,58,61,65,66,78,80,82,-1,-1,-1,-1,-1,-1,-1,-1},
{1,24,27,28,30,35,41,47,50,58,84,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,5,16,17,19,20,23,26,30,40,49,71,81,82,84,-1,-1,-1,-1,-1,-1},
{2,6,7,22,30,34,39,45,50,55,57,59,70,77,79,-1,-1,-1,-1,-1,-1,-1},
{10,12,14,15,18,23,34,41,42,52,58,70,80,83,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,19,20,25,26,40,41,42,43,48,49,52,62,63,71,76,-1,-1,-1,-1,-1},
{11,21,44,47,48,51,55,56,58,73,74,75,84,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,24,35,36,52,63,75,77,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,3,4,14,16,25,37,40,41,45,46,65,68,82,-1,-1,-1,-1,-1,-1,-1},
{11,12,13,32,36,37,38,46,55,56,58,63,64,65,80,-1,-1,-1,-1,-1,-1,-1},
{8,11,13,14,32,41,44,45,50,51,52,53,70,72,83,-1,-1,-1,-1,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
