<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 36;
const int numberOfTasks = 100;
const int numberOfMachines = 4;
const int maxDependencies = 14;
const int longestChain = 8;
const int globalChainSize[numberOfChains] = {8,4,3,5,2,3,5,3,3,4,2,4,4,4,2,2,2,2,3,1,5,3,2,2,2,1,2,2,5,2,2,2,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,17,24,41,43,49,96,98},
{1,72,73,77,-1,-1,-1,-1},
{2,70,97,-1,-1,-1,-1,-1},
{3,75,79,89,94,-1,-1,-1},
{4,84,-1,-1,-1,-1,-1,-1},
{5,83,90,-1,-1,-1,-1,-1},
{6,13,66,82,88,-1,-1,-1},
{7,63,99,-1,-1,-1,-1,-1},
{8,45,56,-1,-1,-1,-1,-1},
{9,42,55,95,-1,-1,-1,-1},
{10,53,-1,-1,-1,-1,-1,-1},
{11,38,68,80,-1,-1,-1,-1},
{12,22,60,81,-1,-1,-1,-1},
{14,54,67,93,-1,-1,-1,-1},
{15,87,-1,-1,-1,-1,-1,-1},
{16,76,-1,-1,-1,-1,-1,-1},
{18,86,-1,-1,-1,-1,-1,-1},
{19,44,-1,-1,-1,-1,-1,-1},
{20,25,92,-1,-1,-1,-1,-1},
{21,-1,-1,-1,-1,-1,-1,-1},
{23,48,59,62,65,-1,-1,-1},
{26,27,32,-1,-1,-1,-1,-1},
{28,57,-1,-1,-1,-1,-1,-1},
{29,37,-1,-1,-1,-1,-1,-1},
{30,78,-1,-1,-1,-1,-1,-1},
{31,-1,-1,-1,-1,-1,-1,-1},
{33,52,-1,-1,-1,-1,-1,-1},
{34,61,-1,-1,-1,-1,-1,-1},
{35,36,51,74,85,-1,-1,-1},
{39,71,-1,-1,-1,-1,-1,-1},
{40,69,-1,-1,-1,-1,-1,-1},
{46,50,-1,-1,-1,-1,-1,-1},
{47,-1,-1,-1,-1,-1,-1,-1},
{58,-1,-1,-1,-1,-1,-1,-1},
{64,-1,-1,-1,-1,-1,-1,-1},
{91,-1,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {6,6,5,6,6,6,4,6,7,4,6,6,7,7,6,6,6,6,6,6,7,8,5,6,5,5,6,4,7,6,6,6,6,4,6,6,4,7,5,3,5,6,6,6,7,4,5,6,6,4,6,5,6,8,5,5,5,5,4,6,5,7,6,4,5,6,6,5,4,5,5,5,5,6,5,6,7,5,6,5,5,5,6,5,5,6,6,4,6,5,5,5,6,5,6,5,6,4,5,5};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,13,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,27,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,18,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,22,25,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,28,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,11,22,25,27,-1,-1,-1,-1,-1,-1,-1,-1},
{7,20,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{24,28,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,7,9,30,31,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,11,19,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,19,33,35,39,40,-1,-1,-1,-1,-1,-1,-1},
{7,8,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,9,12,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,14,23,25,30,36,47,-1,-1,-1,-1,-1,-1,-1},
{1,8,17,18,35,43,46,48,-1,-1,-1,-1,-1,-1},
{18,30,41,45,46,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,36,47,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,28,30,33,40,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,9,10,11,27,29,33,-1,-1,-1,-1,-1,-1,-1},
{3,14,19,29,30,43,44,-1,-1,-1,-1,-1,-1,-1},
{6,42,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,10,12,18,45,46,53,-1,-1,-1,-1,-1,-1},
{5,28,35,41,42,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,24,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,19,27,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,5,22,32,48,-1,-1,-1,-1,-1,-1,-1,-1},
{2,14,34,40,45,58,-1,-1,-1,-1,-1,-1,-1,-1},
{2,14,23,33,34,37,46,58,59,61,-1,-1,-1,-1},
{0,4,7,15,18,30,31,37,56,-1,-1,-1,-1,-1},
{29,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{55,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,8,13,23,38,40,56,64,-1,-1,-1,-1,-1},
{17,27,32,40,44,50,54,63,-1,-1,-1,-1,-1,-1},
{2,4,10,19,36,38,44,-1,-1,-1,-1,-1,-1,-1},
{14,29,34,35,40,50,58,-1,-1,-1,-1,-1,-1,-1},
{2,11,15,22,41,43,54,58,67,-1,-1,-1,-1,-1},
{14,26,39,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,37,38,41,44,45,-1,-1,-1,-1,-1,-1,-1,-1},
{17,18,23,30,43,44,50,57,58,65,72,-1,-1,-1},
{5,30,39,51,54,63,71,-1,-1,-1,-1,-1,-1,-1},
{1,3,24,38,45,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,17,35,46,54,69,75,-1,-1,-1,-1,-1,-1,-1},
{6,25,46,54,64,73,-1,-1,-1,-1,-1,-1,-1,-1},
{2,16,30,36,38,63,-1,-1,-1,-1,-1,-1,-1,-1},
{2,15,20,28,29,32,35,39,41,52,55,56,69,75},
{32,63,68,75,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,13,20,33,60,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,19,56,62,64,66,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,5,17,23,36,38,46,52,61,-1,-1,-1,-1},
{3,4,6,13,21,28,62,64,70,75,78,-1,-1,-1},
{1,46,74,75,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,15,18,32,43,58,-1,-1,-1,-1,-1,-1,-1,-1},
{4,11,15,54,71,85,-1,-1,-1,-1,-1,-1,-1,-1},
{6,14,46,50,56,59,60,65,73,82,85,-1,-1,-1},
{7,8,13,26,35,49,54,59,63,64,79,80,-1,-1},
{7,9,44,45,53,55,69,80,83,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,9,18,23,25,29,33,61,63,64,-1,-1,-1,-1},
{2,38,46,48,67,78,79,-1,-1,-1,-1,-1,-1,-1},
{9,12,21,33,36,44,63,72,74,89,-1,-1,-1,-1},
{7,10,16,47,48,55,66,76,-1,-1,-1,-1,-1,-1},
{4,10,12,13,18,21,24,27,42,49,53,68,76,89},
{4,23,35,43,47,52,54,55,67,70,82,85,-1,-1},
{2,12,24,40,79,96,-1,-1,-1,-1,-1,-1,-1,-1},
{3,10,25,29,34,45,49,56,63,72,-1,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
