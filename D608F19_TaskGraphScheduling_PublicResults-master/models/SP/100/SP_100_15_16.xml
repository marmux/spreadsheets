<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 36;
const int numberOfTasks = 100;
const int numberOfMachines = 16;
const int maxDependencies = 10;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {5,4,2,2,3,2,2,6,2,5,4,3,3,2,5,6,1,4,3,5,2,3,6,1,2,2,2,1,3,1,2,1,2,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,14,70,79,82,-1},
{1,10,40,66,-1,-1},
{2,76,-1,-1,-1,-1},
{3,94,-1,-1,-1,-1},
{4,20,41,-1,-1,-1},
{5,88,-1,-1,-1,-1},
{6,62,-1,-1,-1,-1},
{7,31,54,59,60,69},
{8,68,-1,-1,-1,-1},
{9,43,61,84,98,-1},
{11,56,63,72,-1,-1},
{12,86,97,-1,-1,-1},
{13,83,85,-1,-1,-1},
{15,44,-1,-1,-1,-1},
{16,17,51,67,87,-1},
{18,33,81,89,96,99},
{19,-1,-1,-1,-1,-1},
{21,45,58,90,-1,-1},
{22,27,92,-1,-1,-1},
{23,38,48,64,93,-1},
{24,36,-1,-1,-1,-1},
{25,30,75,-1,-1,-1},
{26,34,50,52,65,73},
{28,-1,-1,-1,-1,-1},
{29,91,-1,-1,-1,-1},
{32,57,-1,-1,-1,-1},
{35,74,-1,-1,-1,-1},
{37,-1,-1,-1,-1,-1},
{39,49,77,-1,-1,-1},
{42,-1,-1,-1,-1,-1},
{46,80,-1,-1,-1,-1},
{47,-1,-1,-1,-1,-1},
{53,71,-1,-1,-1,-1},
{55,-1,-1,-1,-1,-1},
{78,-1,-1,-1,-1,-1},
{95,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {15,30,37,11,24,17,10,4,4,5,32,10,6,16,15,11,15,14,2,15,2,4,1,2,3,1,1,39,2,4,20,22,4,11,18,41,6,11,3,11,5,4,3,5,13,11,1,14,20,4,14,9,10,13,2,17,1,16,17,4,6,2,7,36,16,11,2,27,5,4,16,8,8,15,24,35,8,16,9,7,6,23,3,2,2,5,3,1,2,5,2,11,1,5,1,21,5,41,5,1};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,3,-1,-1,-1,-1,-1,-1,-1},
{8,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,14,16,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,7,-1,-1,-1,-1,-1,-1,-1,-1},
{0,13,-1,-1,-1,-1,-1,-1,-1,-1},
{12,13,-1,-1,-1,-1,-1,-1,-1,-1},
{16,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{22,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,22,-1,-1,-1,-1,-1,-1,-1,-1},
{25,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,13,25,-1,-1,-1,-1,-1,-1,-1},
{7,11,21,28,-1,-1,-1,-1,-1,-1},
{8,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,18,25,30,-1,-1,-1,-1,-1,-1},
{26,30,31,-1,-1,-1,-1,-1,-1,-1},
{21,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,24,27,-1,-1,-1,-1,-1,-1,-1},
{9,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,23,-1,-1,-1,-1,-1,-1,-1,-1},
{10,23,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,14,-1,-1,-1,-1,-1,-1,-1},
{10,13,20,30,34,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,9,12,14,17,30,-1,-1,-1,-1},
{8,9,15,19,22,-1,-1,-1,-1,-1},
{2,9,21,32,37,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,32,-1,-1,-1,-1,-1,-1,-1,-1},
{20,33,38,-1,-1,-1,-1,-1,-1,-1},
{9,18,39,-1,-1,-1,-1,-1,-1,-1},
{34,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,17,-1,-1,-1,-1,-1,-1,-1},
{9,23,50,-1,-1,-1,-1,-1,-1,-1},
{20,22,39,-1,-1,-1,-1,-1,-1,-1},
{7,31,50,53,-1,-1,-1,-1,-1,-1},
{48,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,30,47,49,54,-1,-1,-1,-1,-1},
{8,26,32,42,-1,-1,-1,-1,-1,-1},
{3,34,45,-1,-1,-1,-1,-1,-1,-1},
{3,11,44,54,-1,-1,-1,-1,-1,-1},
{17,21,25,36,49,59,-1,-1,-1,-1},
{1,43,60,-1,-1,-1,-1,-1,-1,-1},
{6,9,10,38,57,-1,-1,-1,-1,-1},
{33,55,56,-1,-1,-1,-1,-1,-1,-1},
{7,38,47,48,-1,-1,-1,-1,-1,-1},
{10,22,25,28,52,-1,-1,-1,-1,-1},
{0,16,38,40,51,-1,-1,-1,-1,-1},
{21,45,51,55,-1,-1,-1,-1,-1,-1},
{3,8,16,60,-1,-1,-1,-1,-1,-1},
{0,19,54,60,63,-1,-1,-1,-1,-1},
{0,1,14,17,33,42,46,-1,-1,-1},
{15,53,55,56,67,-1,-1,-1,-1,-1},
{20,32,60,63,-1,-1,-1,-1,-1,-1},
{0,13,24,46,65,-1,-1,-1,-1,-1},
{9,32,35,37,-1,-1,-1,-1,-1,-1},
{29,30,31,33,57,-1,-1,-1,-1,-1},
{1,2,35,46,47,55,56,61,67,75},
{21,49,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,13,-1,-1,-1,-1,-1,-1,-1},
{36,49,51,70,74,-1,-1,-1,-1,-1},
{8,45,46,50,52,-1,-1,-1,-1,-1},
{3,16,23,33,42,43,-1,-1,-1,-1},
{5,30,51,60,66,79,-1,-1,-1,-1},
{3,13,22,24,31,38,45,51,63,64},
{11,60,61,64,83,-1,-1,-1,-1,-1},
{10,23,29,36,40,74,83,-1,-1,-1},
{3,6,12,16,32,36,55,60,73,-1},
{31,54,63,67,75,-1,-1,-1,-1,-1},
{5,23,45,65,-1,-1,-1,-1,-1,-1},
{8,19,37,79,81,-1,-1,-1,-1,-1},
{16,26,50,58,-1,-1,-1,-1,-1,-1},
{29,59,-1,-1,-1,-1,-1,-1,-1,-1},
{27,29,39,58,64,67,71,73,80,91},
{22,27,36,64,-1,-1,-1,-1,-1,-1},
{3,7,13,30,34,40,70,77,87,89},
{15,35,43,-1,-1,-1,-1,-1,-1,-1},
{7,24,42,43,89,95,-1,-1,-1,-1},
{26,46,70,86,-1,-1,-1,-1,-1,-1},
{84,85,89,95,96,97,-1,-1,-1,-1},
{34,65,79,81,96,-1,-1,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int Machines = numberOfMachines;
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label>
			<label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-263">3</label>
		</location>
		<location id="id3" x="-68" y="51">
			<name x="-93" y="68">Running</name>
			<label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label>
		</location>
		<location id="id4" x="-399" y="-238">
			<name x="-409" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="select" x="-59" y="-119">chain_id : chainId_t</label>
			<label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label>
			<label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-357" y="-280">index &gt;= chainSize</label>
			<label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label>
			<label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label>
			<label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-170" y="-8"/>
			<nail x="-170" y="-170"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label>
			<nail x="127" y="-238"/>
			<nail x="127" y="51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=60] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=200] {Composer.Done}</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 5000 [&lt;=65] {Composer.Done} under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time under TimeSchedule</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
