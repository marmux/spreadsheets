<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 35;
const int numberOfTasks = 100;
const int numberOfMachines = 3;
const int maxDependencies = 16;
const int longestChain = 7;
const int globalChainSize[numberOfChains] = {6,7,4,5,3,5,4,6,4,3,1,3,5,2,2,2,3,2,3,3,4,2,3,2,2,1,3,1,1,2,2,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,9,27,55,75,85,-1},
{1,58,59,63,77,90,95},
{2,83,86,98,-1,-1,-1},
{3,6,14,80,81,-1,-1},
{4,19,89,-1,-1,-1,-1},
{5,22,53,54,60,-1,-1},
{7,10,23,67,-1,-1,-1},
{8,61,68,93,94,99,-1},
{11,35,65,84,-1,-1,-1},
{12,56,62,-1,-1,-1,-1},
{13,-1,-1,-1,-1,-1,-1},
{15,66,91,-1,-1,-1,-1},
{16,37,44,74,88,-1,-1},
{17,49,-1,-1,-1,-1,-1},
{18,92,-1,-1,-1,-1,-1},
{20,96,-1,-1,-1,-1,-1},
{21,50,57,-1,-1,-1,-1},
{24,76,-1,-1,-1,-1,-1},
{25,52,72,-1,-1,-1,-1},
{26,64,69,-1,-1,-1,-1},
{28,32,45,71,-1,-1,-1},
{29,47,-1,-1,-1,-1,-1},
{30,34,73,-1,-1,-1,-1},
{31,40,-1,-1,-1,-1,-1},
{33,97,-1,-1,-1,-1,-1},
{36,-1,-1,-1,-1,-1,-1},
{38,39,87,-1,-1,-1,-1},
{41,-1,-1,-1,-1,-1,-1},
{42,-1,-1,-1,-1,-1,-1},
{43,82,-1,-1,-1,-1,-1},
{46,51,-1,-1,-1,-1,-1},
{48,-1,-1,-1,-1,-1,-1},
{70,-1,-1,-1,-1,-1,-1},
{78,-1,-1,-1,-1,-1,-1},
{79,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {7,2,7,22,2,4,3,3,20,4,30,53,1,24,1,13,3,4,3,9,11,2,4,4,9,1,8,28,12,20,12,3,11,1,3,2,7,2,51,4,8,2,12,13,6,1,1,20,31,4,7,1,20,10,17,5,4,18,3,2,16,16,6,6,9,2,1,2,27,8,2,13,6,4,3,6,8,1,2,9,1,5,5,4,39,4,8,13,1,1,11,7,1,19,11,15,7,36,15,2};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,12,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,12,14,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,17,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,28,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,15,30,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,11,14,18,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,16,21,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,29,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{26,34,37,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,26,29,31,41,42,46,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,10,11,17,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,17,21,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{24,44,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,24,25,32,36,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,22,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,37,40,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,24,27,29,47,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,12,28,29,35,39,41,51,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,26,41,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,8,21,22,23,27,38,44,-1,-1,-1,-1,-1,-1,-1},
{4,28,35,38,45,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,14,20,30,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,10,32,39,44,47,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,17,24,30,40,56,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,18,19,20,36,56,59,60,61,-1,-1,-1,-1,-1,-1,-1},
{9,26,47,51,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,9,17,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,15,30,40,61,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,23,24,31,51,59,66,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,21,28,34,54,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{22,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{17,31,45,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,17,43,52,70,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,16,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,25,33,36,44,72,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,21,37,44,51,55,62,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,24,29,38,40,43,74,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,22,29,37,63,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{26,30,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,14,38,67,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,21,22,30,33,43,49,76,80,-1,-1,-1,-1,-1,-1,-1},
{21,43,46,58,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,9,19,29,65,69,78,-1,-1,-1,-1,-1,-1,-1,-1},
{13,20,26,32,37,40,46,47,51,53,61,64,65,66,76,82},
{2,10,14,19,20,39,46,47,50,56,75,76,-1,-1,-1,-1},
{29,32,71,81,83,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{26,39,80,82,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,21,31,47,54,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,8,10,19,44,70,72,76,79,-1,-1,-1,-1,-1,-1,-1},
{10,19,38,41,60,77,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,23,30,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,11,18,29,52,73,83,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,39,44,57,66,68,74,82,-1,-1,-1,-1,-1,-1,-1,-1},
{14,18,48,63,79,91,93,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,40,51,66,82,83,86,90,-1,-1,-1,-1,-1,-1,-1,-1},
{19,20,23,24,26,29,34,39,42,75,-1,-1,-1,-1,-1,-1},
{2,17,18,33,70,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,12,22,23,37,63,67,69,72,74,78,86,-1,-1,-1,-1},
{12,17,18,24,28,30,34,41,46,61,79,92,94,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
int Machines = numberOfMachines;

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration><template><name x="5" y="5">Composer</name><declaration>// Place local declarations here.
clock time;</declaration><location id="id0" x="-102" y="-255"><name x="-112" y="-289">Init</name><label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
&amp;&amp; cost' == 1</label></location><location id="id1" x="331" y="-255"><name x="321" y="-289">Done</name></location><init ref="id0"/><transition><source ref="id0"/><target ref="id1"/><label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label></transition></template><template><name>Chain</name><parameter>const chainId_t cid</parameter><declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration><location id="id2" x="-68" y="-238"><name x="-78" y="-272">Idle</name></location><location id="id3" x="-68" y="51"><name x="-93" y="68">Running</name><label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label></location><location id="id4" x="-399" y="-238"><name x="-409" y="-272">Done</name></location><init ref="id2"/><transition><source ref="id3"/><target ref="id2"/><label kind="select" x="-59" y="-119">chain_id : chainId_t</label><label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label><label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label></transition><transition><source ref="id2"/><target ref="id4"/><label kind="guard" x="-357" y="-280">index &gt;= chainSize</label><label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label></transition><transition><source ref="id3"/><target ref="id2"/><label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label><label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label><label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label><nail x="-170" y="-8"/><nail x="-170" y="-170"/></transition><transition><source ref="id2"/><target ref="id3"/><label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label><label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label><nail x="127" y="-238"/><nail x="127" y="51"/></transition></template><system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system></nta>
