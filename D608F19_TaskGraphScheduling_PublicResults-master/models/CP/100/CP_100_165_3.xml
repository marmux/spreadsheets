<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 35;
const int numberOfTasks = 100;
const int numberOfMachines = 3;
const int maxDependencies = 16;
const int longestChain = 7;
const int globalChainSize[numberOfChains] = {6,3,2,7,3,4,3,4,7,5,3,2,4,2,3,3,4,2,4,2,3,4,2,3,1,2,2,1,2,2,1,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,25,31,40,79,98,-1},
{1,51,82,-1,-1,-1,-1},
{2,90,-1,-1,-1,-1,-1},
{3,17,60,66,74,85,96},
{4,81,94,-1,-1,-1,-1},
{5,49,72,77,-1,-1,-1},
{6,71,92,-1,-1,-1,-1},
{7,19,88,93,-1,-1,-1},
{8,35,50,69,80,86,97},
{9,63,73,78,99,-1,-1},
{10,70,91,-1,-1,-1,-1},
{11,95,-1,-1,-1,-1,-1},
{12,27,61,83,-1,-1,-1},
{13,84,-1,-1,-1,-1,-1},
{14,76,87,-1,-1,-1,-1},
{15,56,75,-1,-1,-1,-1},
{16,64,67,89,-1,-1,-1},
{18,33,-1,-1,-1,-1,-1},
{20,39,41,59,-1,-1,-1},
{21,32,-1,-1,-1,-1,-1},
{22,46,58,-1,-1,-1,-1},
{23,44,65,68,-1,-1,-1},
{24,54,-1,-1,-1,-1,-1},
{26,34,43,-1,-1,-1,-1},
{28,-1,-1,-1,-1,-1,-1},
{29,42,-1,-1,-1,-1,-1},
{30,52,-1,-1,-1,-1,-1},
{36,-1,-1,-1,-1,-1,-1},
{37,57,-1,-1,-1,-1,-1},
{38,53,-1,-1,-1,-1,-1},
{45,-1,-1,-1,-1,-1,-1},
{47,-1,-1,-1,-1,-1,-1},
{48,-1,-1,-1,-1,-1,-1},
{55,-1,-1,-1,-1,-1,-1},
{62,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {9,14,10,1,9,16,5,1,2,16,8,6,2,1,2,8,11,2,5,5,4,5,4,3,8,7,7,2,4,8,4,10,3,12,3,16,11,17,18,18,5,11,1,7,2,4,8,3,2,7,3,2,10,2,9,13,12,2,5,19,20,10,19,16,18,2,2,4,2,10,4,17,1,7,1,9,13,16,2,3,5,1,17,16,1,9,7,6,4,3,5,5,5,6,11,7,10,2,15,13};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,8,10,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,8,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,20,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,11,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,21,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,12,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,13,23,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,11,14,21,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,9,16,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,24,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,8,21,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,11,13,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,15,20,25,31,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,16,26,28,29,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,13,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,34,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,11,22,23,30,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,16,19,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,14,20,22,23,24,30,36,-1,-1,-1,-1,-1,-1,-1,-1},
{14,22,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,14,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,5,12,15,18,34,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,12,15,25,29,35,36,37,38,39,-1,-1,-1,-1,-1,-1},
{1,9,12,18,21,30,31,33,-1,-1,-1,-1,-1,-1,-1,-1},
{6,23,27,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,11,38,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,22,24,29,30,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,11,15,19,24,25,28,34,39,-1,-1,-1,-1,-1,-1,-1},
{20,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{24,44,46,48,55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,12,16,24,26,36,41,42,53,57,-1,-1,-1,-1,-1,-1},
{3,14,17,20,26,37,39,44,47,55,-1,-1,-1,-1,-1,-1},
{1,8,11,17,21,26,27,32,38,56,-1,-1,-1,-1,-1,-1},
{26,27,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,9,11,12,13,15,21,22,25,27,29,36,41,53,56,-1},
{11,16,20,23,26,28,29,30,35,44,56,-1,-1,-1,-1,-1},
{8,15,29,31,34,42,44,47,53,-1,-1,-1,-1,-1,-1,-1},
{0,3,27,32,53,54,60,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,15,17,35,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,48,53,54,57,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,11,15,21,28,30,37,50,58,-1,-1,-1,-1,-1,-1},
{7,10,14,15,19,20,21,22,30,35,37,41,47,58,-1,-1},
{2,6,8,9,12,22,25,50,54,55,60,-1,-1,-1,-1,-1},
{25,28,39,45,49,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,7,19,24,30,42,46,55,59,60,63,-1,-1,-1,-1,-1},
{0,4,23,41,54,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,16,50,56,59,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,8,11,14,23,24,35,39,47,52,59,64,-1,-1,-1,-1},
{5,28,31,34,42,48,63,68,72,-1,-1,-1,-1,-1,-1,-1},
{4,12,13,15,16,17,48,63,73,-1,-1,-1,-1,-1,-1,-1},
{2,15,18,19,31,40,48,57,59,63,-1,-1,-1,-1,-1,-1},
{2,13,17,35,36,39,44,54,57,65,68,69,-1,-1,-1,-1},
{2,4,5,23,54,60,62,64,72,-1,-1,-1,-1,-1,-1,-1},
{9,22,26,29,31,33,51,68,70,-1,-1,-1,-1,-1,-1,-1},
{6,32,36,43,51,59,61,68,70,-1,-1,-1,-1,-1,-1,-1},
{0,13,18,21,27,31,39,44,64,70,-1,-1,-1,-1,-1,-1},
{0,5,15,28,39,51,54,58,65,74,75,76,78,81,83,-1},
{5,7,14,19,61,78,80,84,-1,-1,-1,-1,-1,-1,-1,-1},
{26,29,30,54,56,67,76,80,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,19,29,37,39,40,42,48,55,66,-1,-1,-1,-1,-1},
{18,20,24,25,29,34,39,41,42,48,53,61,65,67,79,-1},
{1,2,13,30,35,36,39,45,46,51,60,65,81,83,-1,-1},
{3,8,13,20,32,41,54,57,70,72,76,-1,-1,-1,-1,-1},
{6,33,37,54,64,66,71,83,-1,-1,-1,-1,-1,-1,-1,-1},
{9,29,32,45,51,61,63,65,70,76,79,88,-1,-1,-1,-1},
{18,20,22,48,69,75,77,79,81,87,-1,-1,-1,-1,-1,-1},
{10,11,16,17,20,24,32,47,51,52,54,59,62,74,84,-1},
{9,30,35,36,38,39,46,52,60,70,71,77,80,85,-1,-1},
{7,12,14,28,56,65,66,83,85,86,-1,-1,-1,-1,-1,-1},
{0,5,10,19,25,32,33,37,44,46,63,78,79,80,81,87},
{0,11,27,39,43,45,46,58,61,64,67,76,78,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
int Machines = numberOfMachines;

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration><template><name x="5" y="5">Composer</name><declaration>// Place local declarations here.
clock time;</declaration><location id="id0" x="-102" y="-255"><name x="-112" y="-289">Init</name><label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
&amp;&amp; cost' == 1</label></location><location id="id1" x="331" y="-255"><name x="321" y="-289">Done</name></location><init ref="id0"/><transition><source ref="id0"/><target ref="id1"/><label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label></transition></template><template><name>Chain</name><parameter>const chainId_t cid</parameter><declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration><location id="id2" x="-68" y="-238"><name x="-78" y="-272">Idle</name></location><location id="id3" x="-68" y="51"><name x="-93" y="68">Running</name><label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label></location><location id="id4" x="-399" y="-238"><name x="-409" y="-272">Done</name></location><init ref="id2"/><transition><source ref="id3"/><target ref="id2"/><label kind="select" x="-59" y="-119">chain_id : chainId_t</label><label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label><label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label></transition><transition><source ref="id2"/><target ref="id4"/><label kind="guard" x="-357" y="-280">index &gt;= chainSize</label><label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label></transition><transition><source ref="id3"/><target ref="id2"/><label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label><label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label><label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label><nail x="-170" y="-8"/><nail x="-170" y="-170"/></transition><transition><source ref="id2"/><target ref="id3"/><label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label><label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label><nail x="127" y="-238"/><nail x="127" y="51"/></transition></template><system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system></nta>
