<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 19;
const int numberOfTasks = 50;
const int numberOfMachines = 10;
const int maxDependencies = 10;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {5,6,2,3,2,4,2,4,3,3,4,2,1,2,1,2,2,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,36,37,45,49,-1},
{1,12,18,24,42,44},
{2,40,-1,-1,-1,-1},
{3,46,48,-1,-1,-1},
{4,35,-1,-1,-1,-1},
{5,22,33,47,-1,-1},
{6,38,-1,-1,-1,-1},
{7,14,23,43,-1,-1},
{8,27,39,-1,-1,-1},
{9,25,26,-1,-1,-1},
{10,20,28,34,-1,-1},
{11,29,-1,-1,-1,-1},
{13,-1,-1,-1,-1,-1},
{15,19,-1,-1,-1,-1},
{16,-1,-1,-1,-1,-1},
{17,41,-1,-1,-1,-1},
{21,32,-1,-1,-1,-1},
{30,-1,-1,-1,-1,-1},
{31,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {14,4,1,26,2,8,4,15,1,23,21,6,39,2,8,9,13,12,2,3,2,1,3,19,1,6,3,2,25,8,3,2,8,3,14,6,1,23,1,2,6,4,6,1,12,1,9,10,10,12};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,5,10,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,9,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,12,15,16,-1,-1,-1,-1,-1,-1},
{5,11,15,-1,-1,-1,-1,-1,-1,-1},
{8,10,17,-1,-1,-1,-1,-1,-1,-1},
{12,17,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,9,10,13,19,-1,-1,-1,-1},
{1,14,16,-1,-1,-1,-1,-1,-1,-1},
{1,5,9,18,21,-1,-1,-1,-1,-1},
{1,9,-1,-1,-1,-1,-1,-1,-1,-1},
{5,25,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,14,19,25,-1,-1,-1,-1,-1},
{12,15,20,25,-1,-1,-1,-1,-1,-1},
{8,11,14,-1,-1,-1,-1,-1,-1,-1},
{7,28,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,27,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,8,22,32,-1,-1,-1,-1,-1},
{10,15,19,20,28,30,31,-1,-1,-1},
{4,7,18,28,-1,-1,-1,-1,-1,-1},
{0,8,9,10,12,14,21,27,29,-1},
{2,8,10,22,35,36,-1,-1,-1,-1},
{4,6,22,31,-1,-1,-1,-1,-1,-1},
{1,7,9,20,21,27,31,-1,-1,-1},
{1,2,6,8,13,15,27,29,31,-1},
{0,2,17,30,-1,-1,-1,-1,-1,-1},
{12,24,31,39,-1,-1,-1,-1,-1,-1},
{4,13,20,21,23,27,29,41,-1,-1},
{0,6,18,26,33,42,-1,-1,-1,-1},
{2,10,27,37,40,-1,-1,-1,-1,-1},
{3,6,16,30,41,42,-1,-1,-1,-1},
{8,10,12,15,24,27,33,38,41,-1},
{19,21,24,31,32,35,37,46,-1,-1},
{2,5,6,16,19,24,28,31,37,45}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
int Machines = numberOfMachines;

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration><template><name x="5" y="5">Composer</name><declaration>// Place local declarations here.
clock time;</declaration><location id="id0" x="-102" y="-255"><name x="-112" y="-289">Init</name><label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
&amp;&amp; cost' == 1</label></location><location id="id1" x="331" y="-255"><name x="321" y="-289">Done</name></location><init ref="id0"/><transition><source ref="id0"/><target ref="id1"/><label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label></transition></template><template><name>Chain</name><parameter>const chainId_t cid</parameter><declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration><location id="id2" x="-68" y="-238"><name x="-78" y="-272">Idle</name></location><location id="id3" x="-68" y="51"><name x="-93" y="68">Running</name><label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label></location><location id="id4" x="-399" y="-238"><name x="-409" y="-272">Done</name></location><init ref="id2"/><transition><source ref="id3"/><target ref="id2"/><label kind="select" x="-59" y="-119">chain_id : chainId_t</label><label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label><label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label></transition><transition><source ref="id2"/><target ref="id4"/><label kind="guard" x="-357" y="-280">index &gt;= chainSize</label><label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label></transition><transition><source ref="id3"/><target ref="id2"/><label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label><label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label><label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label><nail x="-170" y="-8"/><nail x="-170" y="-170"/></transition><transition><source ref="id2"/><target ref="id3"/><label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label><label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label><nail x="127" y="-238"/><nail x="127" y="51"/></transition></template><system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system></nta>
