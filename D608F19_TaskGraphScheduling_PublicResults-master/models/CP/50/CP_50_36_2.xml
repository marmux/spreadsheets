<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 23;
const int numberOfTasks = 50;
const int numberOfMachines = 2;
const int maxDependencies = 11;
const int longestChain = 4;
const int globalChainSize[numberOfChains] = {3,4,2,3,3,3,4,4,2,2,2,2,2,2,2,3,1,1,1,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,32,39,-1},
{1,34,42,47},
{2,37,-1,-1},
{3,18,38,-1},
{4,25,48,-1},
{5,30,45,-1},
{6,17,33,41},
{7,22,35,40},
{8,27,-1,-1},
{9,36,-1,-1},
{10,43,-1,-1},
{11,44,-1,-1},
{12,21,-1,-1},
{13,31,-1,-1},
{14,20,-1,-1},
{15,29,46,-1},
{16,-1,-1,-1},
{19,-1,-1,-1},
{23,-1,-1,-1},
{24,-1,-1,-1},
{26,-1,-1,-1},
{28,-1,-1,-1},
{49,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {6,20,7,18,7,14,2,9,16,14,3,7,15,18,7,16,15,13,10,4,20,8,9,13,1,5,14,17,1,8,17,13,3,19,3,9,1,10,5,10,5,15,13,4,17,9,16,17,16,9};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,7,9,-1,-1,-1,-1,-1,-1,-1},
{3,8,9,-1,-1,-1,-1,-1,-1,-1,-1},
{8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,14,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,12,-1,-1,-1,-1,-1,-1,-1,-1},
{4,7,11,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,12,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,10,15,-1,-1,-1,-1,-1,-1,-1},
{8,9,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,20,-1,-1,-1,-1,-1,-1,-1,-1},
{15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,15,26,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,9,24,-1,-1,-1,-1,-1,-1,-1},
{10,12,13,23,-1,-1,-1,-1,-1,-1,-1},
{0,4,6,7,13,16,23,25,-1,-1,-1},
{6,17,22,25,26,-1,-1,-1,-1,-1,-1},
{0,1,21,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,8,22,26,-1,-1,-1,-1,-1,-1},
{9,12,17,18,26,-1,-1,-1,-1,-1,-1},
{1,2,8,13,19,20,24,30,-1,-1,-1},
{7,11,18,27,32,-1,-1,-1,-1,-1,-1},
{0,5,8,9,10,18,20,24,30,31,32},
{0,5,13,24,35,36,-1,-1,-1,-1,-1},
{10,16,22,28,33,36,-1,-1,-1,-1,-1},
{1,9,25,26,34,-1,-1,-1,-1,-1,-1},
{10,17,31,34,35,-1,-1,-1,-1,-1,-1},
{9,11,23,25,29,-1,-1,-1,-1,-1,-1},
{7,16,21,29,30,36,43,-1,-1,-1,-1},
{4,16,18,29,35,-1,-1,-1,-1,-1,-1},
{11,18,27,29,42,43,-1,-1,-1,-1,-1},
{4,25,28,43,-1,-1,-1,-1,-1,-1,-1},
{10,25,29,-1,-1,-1,-1,-1,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
int Machines = numberOfMachines;

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration><template><name x="5" y="5">Composer</name><declaration>// Place local declarations here.
clock time;</declaration><location id="id0" x="-102" y="-255"><name x="-112" y="-289">Init</name><label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
&amp;&amp; cost' == 1</label></location><location id="id1" x="331" y="-255"><name x="321" y="-289">Done</name></location><init ref="id0"/><transition><source ref="id0"/><target ref="id1"/><label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label></transition></template><template><name>Chain</name><parameter>const chainId_t cid</parameter><declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration><location id="id2" x="-68" y="-238"><name x="-78" y="-272">Idle</name></location><location id="id3" x="-68" y="51"><name x="-93" y="68">Running</name><label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label></location><location id="id4" x="-399" y="-238"><name x="-409" y="-272">Done</name></location><init ref="id2"/><transition><source ref="id3"/><target ref="id2"/><label kind="select" x="-59" y="-119">chain_id : chainId_t</label><label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label><label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label></transition><transition><source ref="id2"/><target ref="id4"/><label kind="guard" x="-357" y="-280">index &gt;= chainSize</label><label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label></transition><transition><source ref="id3"/><target ref="id2"/><label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label><label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label><label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label><nail x="-170" y="-8"/><nail x="-170" y="-170"/></transition><transition><source ref="id2"/><target ref="id3"/><label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label><label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label><nail x="127" y="-238"/><nail x="127" y="51"/></transition></template><system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system></nta>
