<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 20;
const int numberOfTasks = 50;
const int numberOfMachines = 3;
const int maxDependencies = 10;
const int longestChain = 5;
const int globalChainSize[numberOfChains] = {5,4,2,2,5,2,3,4,3,2,3,3,3,1,2,1,2,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,15,25,32,45},
{1,13,18,41,-1},
{2,43,-1,-1,-1},
{3,36,-1,-1,-1},
{4,11,21,38,40},
{5,42,-1,-1,-1},
{6,26,48,-1,-1},
{7,14,23,49,-1},
{8,16,46,-1,-1},
{9,39,-1,-1,-1},
{10,22,30,-1,-1},
{12,35,44,-1,-1},
{17,29,47,-1,-1},
{19,-1,-1,-1,-1},
{20,31,-1,-1,-1},
{24,-1,-1,-1,-1},
{27,37,-1,-1,-1},
{28,-1,-1,-1,-1},
{33,-1,-1,-1,-1},
{34,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {5,4,7,4,5,5,5,3,3,5,6,8,6,6,6,7,7,5,5,5,6,7,7,6,4,4,7,5,6,5,5,5,5,6,6,7,5,4,5,5,7,6,6,5,7,5,7,6,6,5};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,7,-1,-1,-1,-1,-1,-1,-1},
{2,7,8,9,-1,-1,-1,-1,-1,-1},
{0,3,4,-1,-1,-1,-1,-1,-1,-1},
{4,8,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,16,-1,-1,-1,-1,-1,-1,-1,-1},
{16,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,11,13,-1,-1,-1,-1,-1,-1,-1},
{6,8,10,-1,-1,-1,-1,-1,-1,-1},
{1,5,10,14,16,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,8,9,15,-1,-1,-1,-1,-1,-1},
{1,6,16,-1,-1,-1,-1,-1,-1,-1},
{15,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,17,-1,-1,-1,-1,-1,-1,-1,-1},
{7,16,22,-1,-1,-1,-1,-1,-1,-1},
{5,20,21,23,-1,-1,-1,-1,-1,-1},
{1,7,14,15,25,-1,-1,-1,-1,-1},
{11,26,-1,-1,-1,-1,-1,-1,-1,-1},
{14,17,-1,-1,-1,-1,-1,-1,-1,-1},
{11,12,19,27,28,-1,-1,-1,-1,-1},
{3,6,10,17,24,26,-1,-1,-1,-1},
{3,20,22,27,-1,-1,-1,-1,-1,-1},
{2,7,21,22,-1,-1,-1,-1,-1,-1},
{8,9,10,11,-1,-1,-1,-1,-1,-1},
{11,27,29,30,31,32,33,34,38,-1},
{8,16,18,29,34,38,-1,-1,-1,-1},
{4,5,10,31,32,37,-1,-1,-1,-1},
{2,16,18,20,21,22,39,-1,-1,-1},
{0,9,24,25,34,35,-1,-1,-1,-1},
{11,15,16,20,21,23,27,29,32,38},
{2,16,17,19,24,38,-1,-1,-1,-1},
{16,18,28,29,34,35,-1,-1,-1,-1},
{9,16,18,26,38,-1,-1,-1,-1,-1},
{0,5,23,27,30,32,33,-1,-1,-1}};


// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
int Machines = numberOfMachines;

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;
broadcast chan ChainDone[numberOfChains];</declaration><template><name x="5" y="5">Composer</name><declaration>// Place local declarations here.
clock time;</declaration><location id="id0" x="-102" y="-255"><name x="-112" y="-289">Init</name><label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains
&amp;&amp; cost' == 1</label></location><location id="id1" x="331" y="-255"><name x="321" y="-289">Done</name></location><init ref="id0"/><transition><source ref="id0"/><target ref="id1"/><label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label></transition></template><template><name>Chain</name><parameter>const chainId_t cid</parameter><declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;
int TimeUnit = 2;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}

void DecrementWork(int workDone)
{
    int currentDuration = durations[globalChains[cid][index]];

    if (workDone &gt; currentDuration)
        durations[globalChains[cid][index]] = 0;
    else
        durations[globalChains[cid][index]] -= workDone;
}</declaration><location id="id2" x="-68" y="-238"><name x="-78" y="-272">Idle</name></location><location id="id3" x="-68" y="51"><name x="-93" y="68">Running</name><label kind="invariant" x="-127" y="85">x &lt;= chainDuration[cid]</label></location><location id="id4" x="-399" y="-238"><name x="-409" y="-272">Done</name></location><init ref="id2"/><transition><source ref="id3"/><target ref="id2"/><label kind="select" x="-59" y="-119">chain_id : chainId_t</label><label kind="synchronisation" x="-59" y="-102">ChainDone[chain_id]?</label><label kind="assignment" x="-59" y="-85">DecrementWork(chainDuration[chain_id]),
Machines++</label></transition><transition><source ref="id2"/><target ref="id4"/><label kind="guard" x="-357" y="-280">index &gt;= chainSize</label><label kind="assignment" x="-357" y="-263">numberOfChainsDone++</label></transition><transition><source ref="id3"/><target ref="id2"/><label kind="guard" x="-433" y="-119">x &gt;= chainDuration[cid]</label><label kind="synchronisation" x="-433" y="-102">ChainDone[cid]!</label><label kind="assignment" x="-433" y="-85">Machines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label><nail x="-170" y="-8"/><nail x="-170" y="-170"/></transition><transition><source ref="id2"/><target ref="id3"/><label kind="guard" x="136" y="-238">index &lt; chainSize &amp;&amp;
Machines &gt; 0 &amp;&amp; AllDependenciesDone()</label><label kind="assignment" x="136" y="-204">chainDuration[cid] = durations[globalChains[cid][index]],
Machines--,
x = 0</label><nail x="127" y="-238"/><nail x="127" y="51"/></transition></template><system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system></nta>
