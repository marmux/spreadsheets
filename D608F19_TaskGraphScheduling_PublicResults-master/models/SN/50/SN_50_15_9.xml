<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 14;
const int numberOfTasks = 50;
const int numberOfMachines = 9;
const int maxDependencies = 10;
const int longestChain = 7;
const int globalChainSize[numberOfChains] = {5,2,4,3,4,6,7,3,2,3,4,3,3,1};
const int globalChains[numberOfChains][longestChain] = {
{0,1,30,36,37,-1,-1},
{2,49,-1,-1,-1,-1,-1},
{3,6,33,43,-1,-1,-1},
{4,22,45,-1,-1,-1,-1},
{5,23,42,44,-1,-1,-1},
{7,24,32,38,39,41,-1},
{8,9,21,26,27,47,48},
{10,31,35,-1,-1,-1,-1},
{11,16,-1,-1,-1,-1,-1},
{12,15,20,-1,-1,-1,-1},
{13,29,34,46,-1,-1,-1},
{14,17,19,-1,-1,-1,-1},
{18,25,28,-1,-1,-1,-1},
{40,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {14,10,3,9,27,1,14,42,2,10,25,34,1,4,7,10,45,9,26,4,7,7,6,3,7,16,15,7,3,9,7,24,4,2,2,3,5,4,3,20,12,1,4,4,2,10,5,5,10,20};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,5,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,8,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,-1,-1,-1,-1,-1,-1,-1,-1},
{4,9,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,8,11,12,-1,-1,-1,-1,-1,-1},
{4,6,7,11,-1,-1,-1,-1,-1,-1},
{2,8,11,14,-1,-1,-1,-1,-1,-1},
{0,8,12,-1,-1,-1,-1,-1,-1,-1},
{7,10,11,17,18,-1,-1,-1,-1,-1},
{1,10,12,15,18,-1,-1,-1,-1,-1},
{3,5,9,11,13,-1,-1,-1,-1,-1},
{1,2,4,16,18,19,21,-1,-1,-1},
{0,4,5,13,20,-1,-1,-1,-1,-1},
{5,6,7,8,16,20,21,23,-1,-1},
{2,3,18,-1,-1,-1,-1,-1,-1,-1},
{9,13,21,22,24,-1,-1,-1,-1,-1},
{6,9,26,-1,-1,-1,-1,-1,-1,-1},
{14,17,18,25,-1,-1,-1,-1,-1,-1},
{13,15,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,3,22,-1,-1,-1,-1,-1,-1},
{6,7,10,11,13,14,18,-1,-1,-1},
{2,14,21,23,24,28,-1,-1,-1,-1},
{3,5,6,7,8,13,16,25,31,-1},
{28,29,33,-1,-1,-1,-1,-1,-1,-1},
{12,21,25,31,32,-1,-1,-1,-1,-1},
{15,19,30,-1,-1,-1,-1,-1,-1,-1},
{1,3,4,7,16,20,26,33,36,-1},
{6,7,12,16,20,31,32,-1,-1,-1},
{4,8,9,13,25,28,30,31,32,38},
{14,17,26,-1,-1,-1,-1,-1,-1,-1},
{10,11,13,18,24,34,39,-1,-1,-1},
{3,4,11,12,13,23,26,30,-1,-1},
{1,15,33,38,-1,-1,-1,-1,-1,-1},
{6,8,13,18,19,34,42,-1,-1,-1},
{1,12,17,22,28,34,36,40,-1,-1},
{2,14,18,34,38,-1,-1,-1,-1,-1},
{14,23,27,28,40,42,-1,-1,-1,-1},
{3,20,29,31,33,34,35,38,47,-1},
{0,2,9,22,36,39,45,48,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label> 
 <label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-255">3</label>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
