<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 16;
const int numberOfTasks = 50;
const int numberOfMachines = 2;
const int maxDependencies = 11;
const int longestChain = 7;
const int globalChainSize[numberOfChains] = {5,7,5,5,3,4,4,2,1,3,2,2,2,1,3,1};
const int globalChains[numberOfChains][longestChain] = {
{0,6,13,46,47,-1,-1},
{1,8,15,37,38,48,49},
{2,7,9,17,42,-1,-1},
{3,16,30,34,36,-1,-1},
{4,28,39,-1,-1,-1,-1},
{5,21,22,45,-1,-1,-1},
{10,29,33,41,-1,-1,-1},
{11,35,-1,-1,-1,-1,-1},
{12,-1,-1,-1,-1,-1,-1},
{14,31,40,-1,-1,-1,-1},
{18,43,-1,-1,-1,-1,-1},
{19,27,-1,-1,-1,-1,-1},
{20,44,-1,-1,-1,-1,-1},
{23,-1,-1,-1,-1,-1,-1},
{24,25,32,-1,-1,-1,-1},
{26,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {7,2,2,18,18,16,12,10,11,18,15,14,19,9,11,20,5,12,15,15,19,9,7,20,1,11,13,8,12,15,11,13,13,20,18,14,6,20,15,15,11,7,17,13,13,3,19,14,8,14};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,3,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,5,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,6,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,8,9,11,12,-1,-1,-1,-1,-1},
{3,8,10,15,-1,-1,-1,-1,-1,-1,-1},
{2,9,16,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,14,-1,-1,-1,-1,-1,-1,-1,-1},
{4,14,16,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,16,20,-1,-1,-1,-1,-1,-1,-1},
{1,8,21,-1,-1,-1,-1,-1,-1,-1,-1},
{13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,14,21,-1,-1,-1,-1,-1,-1,-1,-1},
{8,21,22,24,-1,-1,-1,-1,-1,-1,-1},
{16,19,24,-1,-1,-1,-1,-1,-1,-1,-1},
{6,16,19,26,-1,-1,-1,-1,-1,-1,-1},
{2,4,17,20,-1,-1,-1,-1,-1,-1,-1},
{4,9,10,17,25,-1,-1,-1,-1,-1,-1},
{4,7,9,10,14,16,22,27,-1,-1,-1},
{1,3,6,14,-1,-1,-1,-1,-1,-1,-1},
{16,18,25,-1,-1,-1,-1,-1,-1,-1,-1},
{2,22,29,-1,-1,-1,-1,-1,-1,-1,-1},
{1,30,32,-1,-1,-1,-1,-1,-1,-1,-1},
{5,11,14,17,33,-1,-1,-1,-1,-1,-1},
{4,8,12,18,19,20,25,29,34,-1,-1},
{1,6,15,20,21,-1,-1,-1,-1,-1,-1},
{2,8,11,16,20,24,29,31,33,37,-1},
{10,13,16,28,33,-1,-1,-1,-1,-1,-1},
{1,8,19,23,24,25,29,31,-1,-1,-1},
{2,15,24,29,31,33,-1,-1,-1,-1,-1},
{2,13,17,26,-1,-1,-1,-1,-1,-1,-1},
{1,15,18,25,31,-1,-1,-1,-1,-1,-1},
{14,20,28,32,33,-1,-1,-1,-1,-1,-1},
{3,10,12,13,14,20,22,28,-1,-1,-1},
{0,4,11,13,23,24,26,37,-1,-1,-1},
{6,13,14,16,42,46,-1,-1,-1,-1,-1},
{15,32,36,38,41,42,-1,-1,-1,-1,-1},
{4,11,21,25,29,32,42,43,44,45,48}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label> 
 <label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-255">3</label>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
