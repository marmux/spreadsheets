<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 19;
const int numberOfTasks = 50;
const int numberOfMachines = 5;
const int maxDependencies = 20;
const int longestChain = 5;
const int globalChainSize[numberOfChains] = {5,2,2,2,3,3,3,4,3,2,3,4,3,2,2,3,2,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,10,20,33,43},
{1,46,-1,-1,-1},
{2,49,-1,-1,-1},
{3,42,-1,-1,-1},
{4,36,47,-1,-1},
{5,23,45,-1,-1},
{6,30,41,-1,-1},
{7,21,34,39,-1},
{8,31,44,-1,-1},
{9,48,-1,-1,-1},
{11,26,29,-1,-1},
{12,28,37,40,-1},
{13,27,38,-1,-1},
{14,18,-1,-1,-1},
{15,35,-1,-1,-1},
{16,19,32,-1,-1},
{17,22,-1,-1,-1},
{24,-1,-1,-1,-1},
{25,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {4,6,5,6,6,5,5,7,7,6,6,6,7,6,5,6,7,6,6,6,4,7,5,4,5,5,5,4,4,6,6,7,6,5,5,5,6,5,7,5,6,5,5,7,4,5,6,6,7,5};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,3,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,3,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,3,7,11,14,15,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,9,10,13,14,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,2,7,8,10,11,12,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,4,5,6,7,12,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,4,7,13,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,3,4,5,9,12,14,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,5,6,9,10,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,7,9,12,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,7,8,9,10,11,12,13,14,15,17,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,4,5,7,11,12,13,16,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,5,6,8,10,11,12,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,4,6,9,10,16,24,25,26,27,28,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,5,6,8,9,11,14,19,20,21,22,23,26,28,-1,-1,-1,-1,-1},
{1,2,3,5,7,8,9,10,12,14,15,16,17,19,28,-1,-1,-1,-1,-1},
{0,6,8,9,10,16,17,19,22,24,25,26,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,2,5,6,9,13,19,20,21,24,25,28,-1,-1,-1,-1,-1,-1,-1},
{2,5,6,8,10,16,21,22,25,26,27,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,8,15,16,19,20,21,22,23,24,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,2,4,8,9,11,12,14,18,20,21,22,24,25,26,28,-1,-1,-1},
{0,12,14,15,16,23,25,26,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,4,6,13,15,20,24,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,6,9,11,12,15,23,26,30,31,32,34,35,-1,-1,-1,-1,-1,-1},
{2,4,5,7,12,13,16,17,20,22,26,32,35,37,-1,-1,-1,-1,-1,-1},
{2,3,4,6,7,9,11,13,14,16,19,20,22,24,25,27,28,30,34,-1},
{1,2,3,7,10,12,13,15,17,22,23,24,25,27,28,29,30,32,33,34},
{0,1,3,4,7,9,10,11,13,14,19,21,24,25,26,30,33,35,-1,-1},
{2,4,7,9,12,13,15,16,18,24,26,27,29,30,31,32,34,35,-1,-1},
{0,2,4,5,6,9,10,14,16,17,19,23,24,25,27,28,31,34,-1,-1},
{0,1,6,7,13,15,20,22,25,26,27,31,32,33,36,-1,-1,-1,-1,-1},
{4,7,8,9,11,15,16,17,20,25,26,31,32,36,38,-1,-1,-1,-1,-1},
{5,6,8,9,11,12,16,18,20,24,27,30,32,36,37,-1,-1,-1,-1,-1},
{1,2,10,13,17,19,20,21,23,28,31,33,35,36,-1,-1,-1,-1,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label> 
 <label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-255">3</label>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
