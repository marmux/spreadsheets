<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 38;
const int numberOfTasks = 100;
const int numberOfMachines = 7;
const int maxDependencies = 16;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {6,3,6,3,4,2,3,3,5,3,3,3,5,4,2,2,1,4,2,3,5,3,3,3,1,3,2,1,2,2,1,1,1,1,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,16,21,65,72,93},
{1,73,91,-1,-1,-1},
{2,14,53,67,76,89},
{3,69,88,-1,-1,-1},
{4,41,46,85,-1,-1},
{5,96,-1,-1,-1,-1},
{6,49,99,-1,-1,-1},
{7,86,90,-1,-1,-1},
{8,38,59,78,94,-1},
{9,18,87,-1,-1,-1},
{10,68,79,-1,-1,-1},
{11,37,80,-1,-1,-1},
{12,32,44,62,95,-1},
{13,52,77,97,-1,-1},
{15,98,-1,-1,-1,-1},
{17,56,-1,-1,-1,-1},
{19,-1,-1,-1,-1,-1},
{20,33,70,75,-1,-1},
{22,36,-1,-1,-1,-1},
{23,31,83,-1,-1,-1},
{24,48,63,71,92,-1},
{25,58,60,-1,-1,-1},
{26,55,82,-1,-1,-1},
{27,50,84,-1,-1,-1},
{28,-1,-1,-1,-1,-1},
{29,43,54,-1,-1,-1},
{30,51,-1,-1,-1,-1},
{34,-1,-1,-1,-1,-1},
{35,64,-1,-1,-1,-1},
{39,81,-1,-1,-1,-1},
{40,-1,-1,-1,-1,-1},
{42,-1,-1,-1,-1,-1},
{45,-1,-1,-1,-1,-1},
{47,-1,-1,-1,-1,-1},
{57,-1,-1,-1,-1,-1},
{61,-1,-1,-1,-1,-1},
{66,-1,-1,-1,-1,-1},
{74,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {1,8,3,3,6,10,3,4,4,3,5,7,8,2,3,5,7,5,10,9,10,2,4,2,3,7,1,4,5,8,7,6,8,10,10,5,8,8,5,8,10,8,4,7,4,4,8,9,9,3,4,8,6,3,2,9,1,6,5,1,9,10,10,1,1,8,1,1,1,10,5,4,7,1,6,9,6,5,9,3,7,4,2,5,3,4,5,5,1,9,3,3,4,9,3,5,6,8,8,7};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,8,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,8,13,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,7,9,23,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,10,11,12,13,15,26,27,-1,-1,-1,-1,-1,-1,-1,-1},
{4,11,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,20,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,15,17,22,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,7,11,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,7,8,10,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,18,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,4,12,13,18,28,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,12,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,29,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,8,12,15,24,25,32,36,-1,-1,-1,-1,-1,-1,-1},
{33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,12,20,23,24,33,37,38,41,-1,-1,-1,-1,-1,-1,-1},
{4,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,13,18,22,24,29,30,35,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,6,10,12,20,25,37,-1,-1,-1,-1,-1,-1,-1,-1},
{20,21,23,27,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,17,30,34,40,48,50,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,13,15,18,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,14,23,26,36,42,48,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,29,43,45,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,11,14,26,30,40,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,13,17,18,25,33,43,44,50,-1,-1,-1,-1,-1,-1,-1},
{12,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,24,25,30,39,42,43,44,-1,-1,-1,-1,-1,-1,-1,-1},
{3,28,29,38,43,46,57,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,14,23,37,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,26,39,44,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,23,27,29,30,38,39,41,48,-1,-1,-1,-1,-1,-1,-1},
{24,26,35,38,40,57,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,13,16,17,21,33,38,46,53,55,-1,-1,-1,-1,-1},
{27,31,49,55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,7,15,28,43,45,53,57,-1,-1,-1,-1,-1,-1,-1},
{6,10,19,25,26,29,41,42,46,48,55,61,62,-1,-1,-1},
{0,3,7,14,24,36,42,51,-1,-1,-1,-1,-1,-1,-1,-1},
{7,8,21,25,33,36,58,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,8,22,23,29,40,63,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,9,10,15,16,20,31,36,45,46,49,51,52,61,65,67},
{1,7,13,16,18,43,57,61,65,69,-1,-1,-1,-1,-1,-1},
{4,5,23,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,16,21,33,45,47,57,64,70,-1,-1,-1,-1,-1,-1,-1},
{3,21,22,26,27,45,54,64,67,-1,-1,-1,-1,-1,-1,-1},
{6,14,33,38,45,52,55,62,-1,-1,-1,-1,-1,-1,-1,-1},
{19,38,39,43,45,48,51,59,66,-1,-1,-1,-1,-1,-1,-1},
{0,7,17,33,55,63,68,70,-1,-1,-1,-1,-1,-1,-1,-1},
{10,31,37,44,46,57,62,68,70,-1,-1,-1,-1,-1,-1,-1},
{10,26,35,39,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,12,15,34,35,55,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{23,28,29,31,49,60,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,11,16,35,50,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,20,24,25,27,32,39,46,49,54,-1,-1,-1,-1,-1},
{1,3,7,25,31,67,68,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,7,11,13,18,24,31,33,45,48,63,-1,-1,-1,-1},
{12,15,23,25,30,34,45,51,68,69,-1,-1,-1,-1,-1,-1},
{7,11,12,20,28,50,52,57,65,76,79,81,82,-1,-1,-1},
{7,10,27,38,46,64,70,80,86,87,-1,-1,-1,-1,-1,-1},
{10,16,17,54,64,65,67,73,84,88,-1,-1,-1,-1,-1,-1},
{6,24,25,26,33,71,74,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,12,14,23,40,57,64,67,72,80,84,85,-1,-1,-1},
{7,10,12,17,20,28,31,33,36,56,65,67,78,-1,-1,-1},
{1,6,15,26,28,31,37,45,54,62,70,75,78,84,-1,-1},
{5,13,14,21,24,26,29,30,31,34,35,46,56,68,86,-1},
{13,26,31,41,51,56,62,77,86,-1,-1,-1,-1,-1,-1,-1},
{7,15,17,37,47,50,64,68,71,74,81,86,-1,-1,-1,-1},
{9,14,17,19,27,31,33,49,50,53,63,74,80,-1,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label> 
 <label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-255">3</label>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
