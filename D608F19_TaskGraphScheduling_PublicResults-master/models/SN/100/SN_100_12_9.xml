<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 29;
const int numberOfTasks = 100;
const int numberOfMachines = 9;
const int maxDependencies = 24;
const int longestChain = 8;
const int globalChainSize[numberOfChains] = {8,3,3,6,5,2,4,5,3,6,4,6,6,2,3,3,4,2,2,4,4,2,2,2,3,1,2,2,1};
const int globalChains[numberOfChains][longestChain] = {
{0,4,20,64,73,76,82,90},
{1,93,97,-1,-1,-1,-1,-1},
{2,85,96,-1,-1,-1,-1,-1},
{3,19,65,79,89,99,-1,-1},
{5,43,81,92,94,-1,-1,-1},
{6,87,-1,-1,-1,-1,-1,-1},
{7,77,83,88,-1,-1,-1,-1},
{8,24,53,86,91,-1,-1,-1},
{9,62,98,-1,-1,-1,-1,-1},
{10,35,66,67,74,84,-1,-1},
{11,14,56,68,-1,-1,-1,-1},
{12,48,52,57,69,80,-1,-1},
{13,47,50,61,75,78,-1,-1},
{15,95,-1,-1,-1,-1,-1,-1},
{16,70,71,-1,-1,-1,-1,-1},
{17,41,72,-1,-1,-1,-1,-1},
{18,54,58,60,-1,-1,-1,-1},
{21,59,-1,-1,-1,-1,-1,-1},
{22,55,-1,-1,-1,-1,-1,-1},
{23,30,34,46,-1,-1,-1,-1},
{25,28,29,36,-1,-1,-1,-1},
{26,31,-1,-1,-1,-1,-1,-1},
{27,44,-1,-1,-1,-1,-1,-1},
{32,49,-1,-1,-1,-1,-1,-1},
{33,40,63,-1,-1,-1,-1,-1},
{37,-1,-1,-1,-1,-1,-1,-1},
{38,42,-1,-1,-1,-1,-1,-1},
{39,45,-1,-1,-1,-1,-1,-1},
{51,-1,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {1,7,4,3,6,3,1,3,6,3,17,2,10,6,3,4,2,2,1,18,6,3,7,14,10,1,4,1,5,6,1,4,12,2,3,8,2,1,3,20,2,3,8,21,23,2,1,5,8,3,1,1,3,9,4,2,13,7,3,4,1,3,4,4,1,1,2,7,9,23,3,3,5,2,4,4,4,5,14,3,7,3,1,1,2,4,11,3,2,7,5,8,1,10,4,17,2,26,22,15};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,6,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,7,9,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,10,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,10,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,11,12,13,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,4,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,8,15,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,7,10,12,13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,13,16,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,6,8,9,14,17,18,20,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,18,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,9,16,18,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,14,19,20,23,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,9,15,19,22,24,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,12,13,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,7,8,11,22,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,15,19,25,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,7,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,9,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,11,13,16,22,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,9,10,23,24,28,30,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,11,16,23,29,30,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,9,20,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,18,25,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,9,10,19,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,25,33,34,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,8,10,13,17,25,36,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,25,38,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,5,9,10,17,19,23,32,35,36,38,40,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,14,23,27,32,40,42,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,17,27,39,40,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,8,19,21,32,34,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,7,8,9,13,19,22,25,40,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,12,14,20,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,20,22,23,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,6,11,12,13,18,21,22,32,35,37,38,41,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,16,23,28,48,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,8,9,14,15,18,26,35,36,37,39,40,45,46,48,50,51,-1,-1,-1,-1,-1,-1,-1},
{2,6,8,22,24,30,43,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,4,10,15,18,23,27,39,40,41,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,11,12,22,33,35,38,41,45,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,7,8,11,14,24,32,33,34,36,37,46,47,51,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,8,22,26,30,36,40,41,52,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,13,27,28,30,31,49,54,57,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,17,20,21,25,26,27,28,36,37,40,41,42,44,46,55,56,57,-1,-1,-1,-1,-1,-1},
{0,13,16,19,20,27,30,31,38,39,46,51,55,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,9,13,16,20,25,27,31,34,35,46,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,6,7,8,9,16,27,32,39,42,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,23,24,39,40,56,57,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,4,7,13,15,20,30,35,43,47,55,61,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,4,19,28,32,39,46,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,12,22,24,25,26,27,31,35,40,41,43,57,64,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,19,22,23,34,36,38,59,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,10,13,17,23,26,33,35,46,50,56,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,17,20,21,26,29,30,36,38,39,45,49,55,57,63,65,-1,-1,-1,-1,-1,-1,-1},
{3,7,13,16,27,30,32,33,36,49,53,64,69,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,9,16,18,30,39,45,48,51,60,70,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,6,16,28,31,36,41,47,49,55,66,67,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,8,14,19,21,28,30,31,34,42,48,49,57,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,10,20,25,46,65,67,68,73,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,16,18,25,27,28,31,35,38,51,55,56,61,72,74,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,12,14,20,21,31,41,50,53,62,63,70,73,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,7,10,16,23,33,47,55,67,73,76,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,11,15,17,29,38,45,53,66,69,72,75,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,2,5,11,15,19,28,32,33,42,45,46,47,56,59,65,77,-1,-1,-1,-1,-1,-1},
{9,12,14,15,16,21,28,36,38,60,65,69,71,72,77,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,6,7,10,17,20,29,33,34,35,43,45,46,47,50,53,62,76,80,-1,-1,-1,-1},
{15,22,29,37,48,53,54,63,64,65,66,67,68,73,76,80,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,7,11,12,15,21,25,50,53,55,59,63,67,69,70,73,77,79,-1,-1,-1,-1,-1},
{5,9,17,20,22,34,36,37,38,39,41,48,50,55,68,69,70,73,74,77,80,-1,-1,-1},
{1,2,3,13,19,34,42,46,49,56,71,76,81,82,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,16,24,30,48,52,53,54,56,57,63,64,66,68,72,73,74,-1,-1,-1,-1,-1,-1},
{5,6,22,24,26,33,38,40,52,56,62,68,77,79,81,84,85,86,-1,-1,-1,-1,-1,-1},
{4,9,12,16,17,19,26,28,38,40,47,56,58,62,64,75,76,83,84,-1,-1,-1,-1,-1},
{7,8,12,19,36,37,50,60,63,64,70,73,74,79,80,86,-1,-1,-1,-1,-1,-1,-1,-1},
{4,8,9,11,12,21,25,28,30,33,34,40,41,53,60,68,70,73,78,82,84,86,87,88},
{2,8,13,21,22,29,31,34,39,40,56,74,79,86,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,6,12,15,18,35,40,49,56,58,65,73,75,80,81,84,88,89,-1,-1,-1,-1,-1,-1},
{0,1,3,12,13,16,20,23,35,38,42,43,66,70,73,78,86,87,-1,-1,-1,-1,-1,-1},
{2,4,13,14,18,20,21,31,38,44,45,46,49,53,63,69,81,84,92,-1,-1,-1,-1,-1},
{15,19,21,30,36,37,38,44,45,49,53,57,63,74,75,86,-1,-1,-1,-1,-1,-1,-1,-1},
{15,24,40,41,42,49,50,54,57,62,64,66,70,74,85,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,12,20,21,24,25,28,33,36,38,43,44,53,56,59,60,64,69,70,86,93,95,-1,-1},
{2,12,15,16,17,24,32,34,48,60,62,63,65,93,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,27,33,34,35,36,39,45,49,52,60,67,68,69,77,79,80,85,89,-1,-1,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label> 
 <label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-255">3</label>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
