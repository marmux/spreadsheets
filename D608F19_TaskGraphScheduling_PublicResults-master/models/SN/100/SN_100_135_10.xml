<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 42;
const int numberOfTasks = 100;
const int numberOfMachines = 10;
const int maxDependencies = 9;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {5,5,2,2,4,5,5,6,3,2,3,4,3,3,4,2,4,3,3,2,2,3,3,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,13,31,66,95,-1},
{1,26,38,67,83,-1},
{2,94,-1,-1,-1,-1},
{3,97,-1,-1,-1,-1},
{4,23,57,99,-1,-1},
{5,28,47,52,92,-1},
{6,12,24,62,81,-1},
{7,51,61,74,82,98},
{8,69,80,-1,-1,-1},
{9,71,-1,-1,-1,-1},
{10,70,87,-1,-1,-1},
{11,59,73,88,-1,-1},
{14,50,90,-1,-1,-1},
{15,77,85,-1,-1,-1},
{16,29,30,76,-1,-1},
{17,49,-1,-1,-1,-1},
{18,55,72,93,-1,-1},
{19,33,44,-1,-1,-1},
{20,75,84,-1,-1,-1},
{21,46,-1,-1,-1,-1},
{22,63,-1,-1,-1,-1},
{25,78,96,-1,-1,-1},
{27,34,64,-1,-1,-1},
{32,-1,-1,-1,-1,-1},
{35,54,-1,-1,-1,-1},
{36,-1,-1,-1,-1,-1},
{37,-1,-1,-1,-1,-1},
{39,-1,-1,-1,-1,-1},
{40,-1,-1,-1,-1,-1},
{41,-1,-1,-1,-1,-1},
{42,-1,-1,-1,-1,-1},
{43,-1,-1,-1,-1,-1},
{45,-1,-1,-1,-1,-1},
{48,-1,-1,-1,-1,-1},
{53,79,-1,-1,-1,-1},
{56,-1,-1,-1,-1,-1},
{58,-1,-1,-1,-1,-1},
{60,-1,-1,-1,-1,-1},
{65,89,-1,-1,-1,-1},
{68,-1,-1,-1,-1,-1},
{86,-1,-1,-1,-1,-1},
{91,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {10,19,13,10,20,13,13,10,6,14,6,3,1,7,19,18,17,20,2,19,6,10,7,5,5,9,7,10,9,4,1,5,4,7,1,5,11,4,2,16,1,3,4,3,15,9,8,4,2,6,9,3,14,3,5,7,6,4,4,1,20,10,1,5,3,7,8,10,3,5,9,2,1,4,8,9,6,10,13,2,12,8,3,13,16,8,5,8,10,7,9,7,15,4,2,10,7,4,19,10};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1},
{3,10,12,17,-1,-1,-1,-1,-1},
{11,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,3,17,-1,-1,-1,-1,-1},
{17,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1},
{16,-1,-1,-1,-1,-1,-1,-1,-1},
{2,25,29,-1,-1,-1,-1,-1,-1},
{11,13,18,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1},
{17,19,-1,-1,-1,-1,-1,-1,-1},
{18,27,-1,-1,-1,-1,-1,-1,-1},
{24,-1,-1,-1,-1,-1,-1,-1,-1},
{9,-1,-1,-1,-1,-1,-1,-1,-1},
{13,19,-1,-1,-1,-1,-1,-1,-1},
{0,26,-1,-1,-1,-1,-1,-1,-1},
{17,38,-1,-1,-1,-1,-1,-1,-1},
{15,30,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{24,-1,-1,-1,-1,-1,-1,-1,-1},
{15,-1,-1,-1,-1,-1,-1,-1,-1},
{6,33,-1,-1,-1,-1,-1,-1,-1},
{2,30,-1,-1,-1,-1,-1,-1,-1},
{12,21,-1,-1,-1,-1,-1,-1,-1},
{3,16,28,-1,-1,-1,-1,-1,-1},
{7,20,-1,-1,-1,-1,-1,-1,-1},
{2,12,15,17,-1,-1,-1,-1,-1},
{10,14,38,-1,-1,-1,-1,-1,-1},
{1,7,35,48,-1,-1,-1,-1,-1},
{32,38,47,49,-1,-1,-1,-1,-1},
{28,35,-1,-1,-1,-1,-1,-1,-1},
{4,12,35,37,45,-1,-1,-1,-1},
{6,18,-1,-1,-1,-1,-1,-1,-1},
{25,-1,-1,-1,-1,-1,-1,-1,-1},
{9,22,23,29,41,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,11,-1,-1,-1,-1,-1,-1,-1},
{28,-1,-1,-1,-1,-1,-1,-1,-1},
{4,18,37,49,51,-1,-1,-1,-1},
{1,24,35,-1,-1,-1,-1,-1,-1},
{17,22,35,-1,-1,-1,-1,-1,-1},
{13,20,34,-1,-1,-1,-1,-1,-1},
{16,17,-1,-1,-1,-1,-1,-1,-1},
{6,16,31,32,53,-1,-1,-1,-1},
{10,14,16,22,31,38,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,9,36,39,-1,-1,-1,-1},
{8,10,13,14,20,48,59,-1,-1},
{1,9,22,24,-1,-1,-1,-1,-1},
{2,14,27,35,55,-1,-1,-1,-1},
{3,11,32,59,-1,-1,-1,-1,-1},
{35,37,40,46,60,61,65,66,72},
{14,18,20,46,54,56,-1,-1,-1},
{19,30,46,50,51,53,58,60,72},
{7,15,27,33,45,52,58,59,64},
{14,20,25,43,54,64,67,-1,-1},
{10,11,53,-1,-1,-1,-1,-1,-1},
{2,21,37,49,54,59,64,69,72},
{6,62,71,-1,-1,-1,-1,-1,-1},
{7,43,73,74,-1,-1,-1,-1,-1},
{31,50,67,77,-1,-1,-1,-1,-1},
{48,56,66,75,-1,-1,-1,-1,-1},
{42,45,47,63,77,-1,-1,-1,-1},
{29,-1,-1,-1,-1,-1,-1,-1,-1},
{10,31,70,72,-1,-1,-1,-1,-1},
{27,67,73,-1,-1,-1,-1,-1,-1},
{26,53,65,-1,-1,-1,-1,-1,-1},
{6,24,34,37,50,58,84,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,17,47,52,64,77,87,-1,-1},
{18,35,40,50,63,72,78,84,-1},
{2,15,16,20,30,51,64,67,-1},
{9,13,38,65,66,88,-1,-1,-1},
{9,25,50,74,78,-1,-1,-1,-1},
{0,3,25,57,59,69,77,-1,-1},
{6,19,25,58,61,65,73,75,82},
{2,57,66,75,-1,-1,-1,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label> 
 <label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-255">3</label>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
