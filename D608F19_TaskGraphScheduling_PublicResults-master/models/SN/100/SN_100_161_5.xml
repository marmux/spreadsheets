<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 30;
const int numberOfTasks = 100;
const int numberOfMachines = 5;
const int maxDependencies = 23;
const int longestChain = 8;
const int globalChainSize[numberOfChains] = {5,5,8,3,2,2,5,2,4,4,4,5,4,3,3,5,4,5,3,1,3,7,2,1,3,2,1,2,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,1,65,74,91,-1,-1,-1},
{2,4,96,97,98,-1,-1,-1},
{3,77,78,80,82,90,93,94},
{5,50,85,-1,-1,-1,-1,-1},
{6,88,-1,-1,-1,-1,-1,-1},
{7,99,-1,-1,-1,-1,-1,-1},
{8,30,52,76,84,-1,-1,-1},
{9,87,-1,-1,-1,-1,-1,-1},
{10,26,55,68,-1,-1,-1,-1},
{11,36,92,95,-1,-1,-1,-1},
{12,72,79,89,-1,-1,-1,-1},
{13,45,69,73,83,-1,-1,-1},
{14,59,71,81,-1,-1,-1,-1},
{15,60,75,-1,-1,-1,-1,-1},
{16,44,66,-1,-1,-1,-1,-1},
{17,20,49,58,63,-1,-1,-1},
{18,57,62,86,-1,-1,-1,-1},
{19,28,38,41,43,-1,-1,-1},
{21,54,67,-1,-1,-1,-1,-1},
{22,-1,-1,-1,-1,-1,-1,-1},
{23,24,47,-1,-1,-1,-1,-1},
{25,27,33,39,56,61,70,-1},
{29,53,-1,-1,-1,-1,-1,-1},
{31,-1,-1,-1,-1,-1,-1,-1},
{32,42,64,-1,-1,-1,-1,-1},
{34,48,-1,-1,-1,-1,-1,-1},
{35,-1,-1,-1,-1,-1,-1,-1},
{37,46,-1,-1,-1,-1,-1,-1},
{40,-1,-1,-1,-1,-1,-1,-1},
{51,-1,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {6,7,5,5,9,7,7,5,9,12,6,10,15,7,5,11,5,6,11,7,5,6,5,5,13,13,8,6,10,8,6,5,15,5,9,7,10,5,5,5,6,8,6,10,9,6,4,13,8,11,4,7,5,5,9,14,7,6,6,7,5,10,13,5,13,5,3,14,8,5,10,4,7,10,7,5,11,6,8,5,5,9,14,10,7,6,12,13,6,7,6,6,8,7,15,6,4,3,15,5};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,7,12,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,12,14,15,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,6,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,8,20,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,12,17,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,8,10,18,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,9,10,14,19,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,12,14,18,19,20,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,6,8,11,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,17,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,17,18,19,21,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,15,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,12,13,25,33,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,9,10,11,23,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,8,12,20,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,17,19,26,28,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,12,21,26,30,33,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,11,29,36,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,8,14,17,23,25,26,31,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,10,18,19,27,30,32,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,24,26,34,39,40,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,6,9,11,16,24,25,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,7,10,12,13,15,28,38,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,14,19,24,26,37,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,13,15,24,25,28,30,32,34,37,39,40,42,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,20,32,33,34,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,13,20,30,35,38,41,42,44,45,46,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,5,10,18,32,34,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,12,24,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,14,15,18,21,30,33,35,43,44,47,50,51,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,12,23,24,28,29,39,40,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,10,12,20,21,31,35,37,38,50,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,9,10,14,15,16,21,22,26,36,44,46,50,51,53,54,-1,-1,-1,-1,-1,-1,-1},
{5,11,12,13,16,28,29,37,39,55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,9,10,12,17,18,21,27,30,38,39,43,47,51,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,11,15,18,25,29,48,49,51,52,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,8,14,16,20,22,23,26,28,34,40,41,50,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,15,17,24,26,31,34,36,38,40,46,47,48,52,53,59,-1,-1,-1,-1,-1,-1,-1},
{5,8,21,24,30,33,56,57,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,13,18,20,22,32,37,40,41,44,47,54,55,57,61,-1,-1,-1,-1,-1,-1,-1},
{12,19,21,33,35,44,46,50,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,34,36,41,42,51,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,3,8,9,10,12,20,29,32,36,37,38,39,45,47,48,52,54,-1,-1,-1,-1},
{3,4,8,10,16,18,23,26,32,35,40,43,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,12,16,21,22,23,25,37,42,54,60,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,9,10,16,17,24,33,34,35,39,41,55,57,60,65,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,9,13,22,24,36,39,45,47,56,59,62,63,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,10,16,24,29,31,37,48,51,52,53,56,59,61,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,7,11,20,21,26,59,66,67,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,7,8,12,17,19,22,28,37,43,51,55,63,66,-1,-1,-1,-1,-1,-1,-1,-1},
{6,8,11,24,37,41,44,45,46,55,56,59,60,69,71,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,2,10,20,35,36,37,50,51,55,62,65,68,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,10,14,29,37,41,42,48,52,54,56,60,61,65,66,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,5,9,10,12,17,18,19,25,31,34,36,44,51,52,56,62,69,70,71,72,73},
{2,3,7,11,16,18,21,22,23,27,29,39,43,46,48,49,51,53,54,57,65,76,-1},
{1,3,6,14,16,19,25,28,31,44,51,54,60,62,70,75,77,-1,-1,-1,-1,-1,-1},
{0,2,9,21,22,25,34,38,40,44,47,53,57,72,77,-1,-1,-1,-1,-1,-1,-1,-1},
{4,18,20,25,26,32,34,43,48,50,63,64,68,73,78,-1,-1,-1,-1,-1,-1,-1,-1},
{6,16,19,22,24,35,38,39,58,60,63,67,71,75,76,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,9,13,15,16,19,27,45,46,47,50,52,54,72,73,80,-1,-1,-1,-1,-1,-1},
{2,10,15,20,24,30,33,37,44,46,47,58,65,67,69,73,-1,-1,-1,-1,-1,-1,-1},
{2,8,11,12,15,18,19,38,40,44,53,54,56,64,66,72,74,75,76,79,83,-1,-1},
{10,12,15,22,27,28,38,50,55,56,59,65,67,68,77,79,80,-1,-1,-1,-1,-1,-1},
{6,9,12,13,18,29,30,31,32,33,39,43,46,47,61,62,76,-1,-1,-1,-1,-1,-1},
{1,2,6,9,10,26,42,46,56,72,75,77,83,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,6,8,16,18,22,29,31,34,45,50,59,60,61,67,68,72,80,83,-1,-1,-1},
{0,1,8,11,12,17,24,33,43,47,57,59,79,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,24,42,46,48,49,50,56,58,67,71,73,78,80,82,83,84,85,87,88,-1,-1},
{0,7,8,9,10,15,16,20,25,34,48,51,55,60,67,74,76,79,-1,-1,-1,-1,-1},
{4,8,11,20,23,27,29,32,36,41,55,62,81,83,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,4,11,15,21,22,26,31,43,44,49,56,58,66,70,72,73,76,83,84,90,92},
{9,12,14,15,26,36,52,63,64,67,70,73,88,89,93,-1,-1,-1,-1,-1,-1,-1,-1},
{3,12,18,23,28,31,32,34,40,44,47,48,55,58,60,63,67,74,79,92,-1,-1,-1},
{0,1,4,8,12,14,17,19,27,31,32,40,41,53,61,78,79,95,-1,-1,-1,-1,-1},
{0,2,14,21,28,34,40,48,53,54,59,77,80,82,86,88,92,96,-1,-1,-1,-1,-1},
{0,4,6,7,25,27,38,40,46,50,55,61,63,75,86,89,96,97,-1,-1,-1,-1,-1},
{2,7,14,26,31,32,42,54,55,59,64,68,74,81,82,84,87,89,-1,-1,-1,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label> 
 <label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-255">3</label>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
