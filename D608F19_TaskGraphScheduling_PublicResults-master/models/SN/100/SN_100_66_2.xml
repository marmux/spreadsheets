<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 33;
const int numberOfTasks = 100;
const int numberOfMachines = 2;
const int maxDependencies = 13;
const int longestChain = 9;
const int globalChainSize[numberOfChains] = {9,5,5,5,4,9,5,3,3,4,3,3,2,4,3,3,3,4,2,2,3,4,2,1,1,1,1,1,1,1,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,10,12,20,41,71,91,96,99},
{1,64,86,88,94,-1,-1,-1,-1},
{2,14,16,29,97,-1,-1,-1,-1},
{3,49,55,74,92,-1,-1,-1,-1},
{4,58,65,83,-1,-1,-1,-1,-1},
{5,17,27,53,70,72,80,84,95},
{6,23,51,78,93,-1,-1,-1,-1},
{7,50,81,-1,-1,-1,-1,-1,-1},
{8,73,98,-1,-1,-1,-1,-1,-1},
{9,35,77,90,-1,-1,-1,-1,-1},
{11,76,85,-1,-1,-1,-1,-1,-1},
{13,79,87,-1,-1,-1,-1,-1,-1},
{15,69,-1,-1,-1,-1,-1,-1,-1},
{18,44,45,62,-1,-1,-1,-1,-1},
{19,26,56,-1,-1,-1,-1,-1,-1},
{21,32,40,-1,-1,-1,-1,-1,-1},
{22,57,59,-1,-1,-1,-1,-1,-1},
{24,43,52,67,-1,-1,-1,-1,-1},
{25,47,-1,-1,-1,-1,-1,-1,-1},
{28,34,-1,-1,-1,-1,-1,-1,-1},
{30,60,82,-1,-1,-1,-1,-1,-1},
{31,46,54,89,-1,-1,-1,-1,-1},
{33,61,-1,-1,-1,-1,-1,-1,-1},
{36,-1,-1,-1,-1,-1,-1,-1,-1},
{37,-1,-1,-1,-1,-1,-1,-1,-1},
{38,-1,-1,-1,-1,-1,-1,-1,-1},
{39,-1,-1,-1,-1,-1,-1,-1,-1},
{42,-1,-1,-1,-1,-1,-1,-1,-1},
{48,-1,-1,-1,-1,-1,-1,-1,-1},
{63,-1,-1,-1,-1,-1,-1,-1,-1},
{66,-1,-1,-1,-1,-1,-1,-1,-1},
{68,-1,-1,-1,-1,-1,-1,-1,-1},
{75,-1,-1,-1,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {3,12,14,11,18,6,5,13,14,9,4,16,8,5,19,18,6,1,7,16,4,16,14,2,16,2,7,16,16,17,8,3,10,3,9,17,3,8,8,20,19,11,7,8,20,6,5,7,12,7,19,7,10,1,4,9,16,7,14,7,1,9,12,20,5,11,5,12,2,20,16,12,17,15,2,7,13,11,18,20,3,19,4,3,14,17,8,16,6,10,1,13,3,5,4,16,10,5,19,7};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,8,9,10,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,13,14,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,12,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,17,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,3,13,15,16,18,27,-1,-1,-1,-1,-1,-1},
{19,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,21,22,24,-1,-1,-1,-1,-1,-1,-1,-1},
{15,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,25,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,9,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,16,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{22,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{19,32,38,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,20,31,32,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,18,22,23,39,-1,-1,-1,-1,-1,-1,-1,-1},
{5,11,25,38,44,-1,-1,-1,-1,-1,-1,-1,-1},
{7,13,28,31,39,-1,-1,-1,-1,-1,-1,-1,-1},
{6,18,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,12,16,47,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,7,13,30,33,38,48,-1,-1,-1,-1,-1},
{6,13,23,38,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,19,31,43,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,14,24,27,48,-1,-1,-1,-1,-1,-1,-1},
{11,46,48,53,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,15,16,24,49,54,-1,-1,-1,-1,-1,-1,-1},
{1,26,36,50,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,22,27,48,52,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,13,14,21,40,44,-1,-1,-1,-1,-1,-1},
{0,9,19,25,31,57,-1,-1,-1,-1,-1,-1,-1},
{18,30,55,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{18,24,33,42,54,-1,-1,-1,-1,-1,-1,-1,-1},
{5,12,24,45,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,12,35,38,48,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,15,19,21,23,25,27,45,58,61,-1,-1},
{23,33,43,51,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{16,39,44,52,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,60,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,15,22,28,37,48,-1,-1,-1,-1,-1,-1,-1},
{2,18,34,42,48,53,-1,-1,-1,-1,-1,-1,-1},
{41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,36,52,57,70,-1,-1,-1,-1,-1,-1,-1,-1},
{8,55,58,62,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,17,23,55,62,-1,-1,-1,-1,-1,-1,-1,-1},
{33,53,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,18,22,23,25,53,-1,-1,-1,-1,-1,-1,-1},
{2,13,26,34,35,38,69,71,-1,-1,-1,-1,-1},
{10,14,15,18,21,24,27,33,51,73,-1,-1,-1},
{5,11,13,16,61,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,28,34,43,48,52,58,68,72,-1,-1,-1},
{1,32,45,50,51,63,77,-1,-1,-1,-1,-1,-1},
{12,27,31,48,51,60,-1,-1,-1,-1,-1,-1,-1},
{21,27,32,39,52,55,62,65,69,72,73,78,79},
{8,20,34,39,48,50,59,80,81,-1,-1,-1,-1},
{6,11,32,43,52,67,76,79,-1,-1,-1,-1,-1},
{4,19,37,45,64,71,-1,-1,-1,-1,-1,-1,-1},
{27,32,79,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,9,35,38,54,58,67,72,77,86,-1,-1,-1},
{12,33,54,64,78,-1,-1,-1,-1,-1,-1,-1,-1},
{11,17,22,27,77,78,-1,-1,-1,-1,-1,-1,-1},
{21,34,36,37,41,60,65,71,79,-1,-1,-1,-1},
{6,38,74,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,10,11,44,50,61,62,63,64,68,78,82,90},
{1,7,8,11,16,20,26,45,76,88,93,-1,-1},
{18,25,31,45,50,61,84,91,-1,-1,-1,-1,-1},
{4,24,39,41,57,58,65,69,73,77,86,89,91},
{29,34,39,47,48,75,-1,-1,-1,-1,-1,-1,-1},
{22,25,39,73,91,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,38,46,53,96,-1,-1,-1,-1,-1,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label> 
 <label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-255">3</label>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
