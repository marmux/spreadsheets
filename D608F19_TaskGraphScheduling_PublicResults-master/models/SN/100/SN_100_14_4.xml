<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 32;
const int numberOfTasks = 100;
const int numberOfMachines = 4;
const int maxDependencies = 14;
const int longestChain = 6;
const int globalChainSize[numberOfChains] = {5,4,5,6,2,6,3,2,3,4,4,3,2,3,3,3,3,3,3,6,3,3,2,2,2,4,2,3,1,2,2,1};
const int globalChains[numberOfChains][longestChain] = {
{0,1,4,80,92,-1},
{2,33,54,91,-1,-1},
{3,18,25,31,90,-1},
{5,58,84,85,89,95},
{6,97,-1,-1,-1,-1},
{7,9,56,59,75,98},
{8,32,96,-1,-1,-1},
{10,94,-1,-1,-1,-1},
{11,70,93,-1,-1,-1},
{12,55,73,86,-1,-1},
{13,39,41,72,-1,-1},
{14,79,99,-1,-1,-1},
{15,87,-1,-1,-1,-1},
{16,65,78,-1,-1,-1},
{17,64,68,-1,-1,-1},
{19,48,83,-1,-1,-1},
{20,38,81,-1,-1,-1},
{21,24,67,-1,-1,-1},
{22,63,88,-1,-1,-1},
{23,28,34,37,66,82},
{26,45,74,-1,-1,-1},
{27,42,76,-1,-1,-1},
{29,49,-1,-1,-1,-1},
{30,60,-1,-1,-1,-1},
{35,50,-1,-1,-1,-1},
{36,46,53,69,-1,-1},
{40,47,-1,-1,-1,-1},
{43,52,71,-1,-1,-1},
{44,-1,-1,-1,-1,-1},
{51,61,-1,-1,-1,-1},
{57,62,-1,-1,-1,-1},
{77,-1,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {11,11,1,13,9,2,1,6,3,7,2,1,2,3,6,2,14,2,8,1,2,26,2,3,7,6,2,26,17,7,2,3,4,9,1,5,1,9,5,1,6,6,3,5,1,1,7,1,1,6,1,8,2,1,2,15,3,3,3,6,14,2,4,9,2,1,11,2,1,1,2,4,2,5,3,4,4,3,6,8,4,1,2,8,4,7,8,4,9,4,5,6,3,4,12,5,7,6,13,3};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,4,5,10,16,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,11,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,17,21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{21,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,10,25,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,9,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,23,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,10,21,28,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,13,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,8,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,11,20,30,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,13,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,11,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,13,27,31,36,40,-1,-1,-1,-1,-1,-1,-1,-1},
{22,30,34,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{26,31,33,34,35,43,-1,-1,-1,-1,-1,-1,-1,-1},
{36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{26,30,38,40,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,8,14,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{29,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,32,35,40,46,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,10,20,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,32,35,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,43,45,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,11,14,22,33,40,42,50,52,-1,-1,-1,-1,-1},
{7,12,13,17,25,28,44,54,-1,-1,-1,-1,-1,-1},
{2,3,9,11,16,22,34,38,-1,-1,-1,-1,-1,-1},
{8,12,18,32,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,25,44,56,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,8,31,56,57,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,6,27,28,30,50,-1,-1,-1,-1,-1,-1,-1,-1},
{19,24,51,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,43,53,57,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,11,16,22,26,34,-1,-1,-1,-1,-1,-1,-1,-1},
{6,8,16,17,21,26,27,37,42,51,-1,-1,-1,-1},
{4,6,16,19,20,39,40,-1,-1,-1,-1,-1,-1,-1},
{8,18,26,35,37,47,48,57,-1,-1,-1,-1,-1,-1},
{0,15,16,23,24,34,36,59,60,66,-1,-1,-1,-1},
{2,13,18,19,52,64,-1,-1,-1,-1,-1,-1,-1,-1},
{31,34,42,53,61,63,-1,-1,-1,-1,-1,-1,-1,-1},
{0,8,11,22,33,34,-1,-1,-1,-1,-1,-1,-1,-1},
{26,51,52,58,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,24,26,41,46,59,61,65,-1,-1,-1,-1,-1,-1},
{21,22,31,36,50,55,56,67,-1,-1,-1,-1,-1,-1},
{7,13,27,45,49,53,54,64,-1,-1,-1,-1,-1,-1},
{6,7,14,41,50,51,59,65,72,-1,-1,-1,-1,-1},
{16,24,28,42,43,57,65,-1,-1,-1,-1,-1,-1,-1},
{14,26,42,54,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,14,15,16,48,53,65,-1,-1,-1,-1,-1,-1,-1},
{7,12,13,14,19,37,44,50,71,78,-1,-1,-1,-1},
{1,4,13,15,18,22,23,30,31,38,46,55,72,-1},
{27,37,38,39,43,65,74,-1,-1,-1,-1,-1,-1,-1},
{9,18,66,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,8,16,37,42,46,48,67,74,81,-1,-1,-1,-1},
{9,14,33,39,58,73,75,79,-1,-1,-1,-1,-1,-1},
{2,7,25,37,56,84,-1,-1,-1,-1,-1,-1,-1,-1},
{18,30,39,43,46,49,62,68,73,81,84,-1,-1,-1},
{1,7,12,14,15,16,19,29,37,49,52,71,78,-1},
{21,52,53,62,63,75,79,-1,-1,-1,-1,-1,-1,-1},
{5,8,19,27,28,35,53,61,65,85,86,87,-1,-1},
{2,4,10,29,31,49,55,59,72,-1,-1,-1,-1,-1},
{1,6,12,14,15,38,54,62,63,69,81,90,-1,-1},
{0,2,16,29,31,35,45,58,63,73,76,80,81,-1},
{2,10,12,26,29,33,38,45,50,60,70,73,-1,-1},
{10,12,28,30,32,46,51,52,60,73,84,85,88,-1},
{15,20,36,41,54,58,64,77,89,-1,-1,-1,-1,-1},
{6,8,24,25,32,38,42,52,65,70,83,88,-1,-1},
{6,8,14,24,27,28,31,38,48,65,81,83,85,86},
{12,13,21,24,25,69,75,82,-1,-1,-1,-1,-1,-1},
{0,11,48,78,79,85,87,-1,-1,-1,-1,-1,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label> 
 <label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-255">3</label>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
