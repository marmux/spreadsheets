<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/researchgroup/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>//Variables
const int numberOfChains = 35;
const int numberOfTasks = 100;
const int numberOfMachines = 4;
const int maxDependencies = 24;
const int longestChain = 5;
const int globalChainSize[numberOfChains] = {5,5,2,3,3,4,2,2,4,5,3,5,5,3,3,2,4,3,4,3,2,3,2,5,3,1,1,2,2,2,2,2,1,1,1};
const int globalChains[numberOfChains][longestChain] = {
{0,18,71,79,98},
{1,46,57,72,96},
{2,91,-1,-1,-1},
{3,20,88,-1,-1},
{4,85,97,-1,-1},
{5,65,67,93,-1},
{6,94,-1,-1,-1},
{7,99,-1,-1,-1},
{8,22,81,86,-1},
{9,64,75,80,87},
{10,83,89,-1,-1},
{11,24,59,82,95},
{12,34,62,84,90},
{13,40,92,-1,-1},
{14,50,68,-1,-1},
{15,78,-1,-1,-1},
{16,47,63,74,-1},
{17,51,70,-1,-1},
{19,30,52,69,-1},
{21,43,54,-1,-1},
{23,66,-1,-1,-1},
{25,39,48,-1,-1},
{26,77,-1,-1,-1},
{27,29,44,56,73},
{28,42,49,-1,-1},
{31,-1,-1,-1,-1},
{32,-1,-1,-1,-1},
{33,60,-1,-1,-1},
{35,61,-1,-1,-1},
{36,45,-1,-1,-1},
{37,38,-1,-1,-1},
{41,55,-1,-1,-1},
{53,-1,-1,-1,-1},
{58,-1,-1,-1,-1},
{76,-1,-1,-1,-1}};
int chainDuration[numberOfChains] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int durations[numberOfTasks] = {5,5,11,2,5,8,4,19,6,20,19,9,1,2,11,1,3,19,10,12,5,9,15,2,9,4,16,12,4,18,14,1,12,8,10,7,1,4,14,8,15,8,2,1,6,4,3,8,2,3,2,3,18,19,4,8,18,7,7,14,8,13,6,18,4,16,8,2,2,4,16,15,14,9,13,7,4,9,3,20,9,9,4,8,15,17,5,6,15,2,1,1,17,2,13,12,10,7,1,3};
const int dependencies[numberOfTasks][maxDependencies] = {
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{7,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,4,5,7,10,14,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,8,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,3,6,14,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,11,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,3,6,7,8,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,5,6,9,10,11,12,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,8,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,12,20,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,14,15,16,19,27,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,13,16,19,20,21,24,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,13,15,21,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,14,15,19,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,2,9,12,14,15,19,20,23,26,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,10,11,13,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,15,18,22,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,7,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,9,25,28,34,36,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,10,13,14,25,32,34,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,5,6,7,13,20,22,23,29,31,36,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,19,29,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,7,13,16,27,28,29,32,35,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,5,13,15,17,21,25,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,14,17,18,22,23,28,29,31,36,37,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,20,22,25,28,30,36,41,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,1,3,9,12,19,28,29,31,36,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,14,15,16,18,21,34,35,38,43,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,15,22,32,36,39,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,12,14,23,24,29,32,34,35,36,42,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,3,6,9,12,14,25,27,28,29,31,32,40,41,43,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,5,7,9,13,17,21,22,25,37,43,49,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,15,17,19,22,27,30,35,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,8,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{4,13,15,22,27,30,31,35,43,47,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,12,15,23,40,41,46,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{3,13,19,21,22,23,44,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,4,6,7,9,11,12,18,28,29,32,33,37,39,41,42,46,-1,-1,-1,-1,-1,-1,-1},
{0,11,15,30,36,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,5,10,14,24,27,28,32,41,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{9,10,15,21,33,34,42,43,44,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,19,25,35,36,45,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{6,8,20,22,25,28,34,37,42,44,57,60,61,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{12,18,22,24,31,33,36,38,43,47,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,3,6,7,9,12,15,22,30,32,35,40,43,49,56,58,61,-1,-1,-1,-1,-1,-1,-1},
{0,2,5,6,13,20,24,30,31,32,40,41,42,44,45,48,50,55,-1,-1,-1,-1,-1,-1},
{1,4,10,21,23,29,30,31,36,41,42,44,45,48,51,56,60,61,-1,-1,-1,-1,-1,-1},
{3,5,6,10,15,18,20,23,25,28,37,38,39,40,45,56,62,65,66,-1,-1,-1,-1,-1},
{12,16,18,22,26,27,31,50,52,63,64,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{8,14,15,32,34,38,41,44,49,50,52,55,59,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,5,17,25,26,28,31,34,50,51,57,60,62,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,2,3,8,10,11,14,17,18,19,25,26,31,43,54,57,60,63,66,-1,-1,-1,-1,-1},
{2,5,11,12,17,18,25,30,32,33,39,46,55,57,59,61,62,66,-1,-1,-1,-1,-1,-1},
{5,6,44,46,47,56,59,61,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{20,24,27,28,38,46,48,51,53,56,57,59,60,63,65,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,4,6,22,30,31,36,38,46,50,52,64,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,11,13,19,36,46,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,7,12,13,26,34,56,58,65,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{13,15,16,20,24,28,29,33,37,45,46,47,50,55,56,57,66,-1,-1,-1,-1,-1,-1,-1},
{0,5,6,18,26,32,34,43,45,46,47,51,62,66,71,74,76,-1,-1,-1,-1,-1,-1,-1},
{2,3,6,9,26,31,55,56,75,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{1,7,8,15,18,22,23,29,31,32,33,37,38,39,43,45,48,58,63,65,68,72,-1,-1},
{0,7,9,12,15,20,29,34,42,52,54,55,58,59,64,68,69,70,72,-1,-1,-1,-1,-1},
{0,9,10,17,27,36,39,46,47,49,52,56,62,64,67,77,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,13,21,33,35,36,38,39,46,48,56,58,62,65,75,77,-1,-1,-1,-1,-1,-1,-1},
{0,4,7,10,18,32,43,45,53,57,63,66,74,75,78,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{2,6,9,12,14,25,29,41,55,57,61,64,66,81,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{5,8,15,18,20,24,25,28,29,31,33,34,44,48,50,51,52,53,59,69,74,80,84,-1},
{0,5,7,8,20,22,28,31,34,35,37,44,51,54,62,68,70,72,73,79,80,82,84,-1},
{2,4,15,22,25,26,27,30,31,34,42,48,60,66,68,76,83,-1,-1,-1,-1,-1,-1,-1},
{9,23,26,28,30,37,45,47,48,56,58,64,68,74,76,77,83,84,-1,-1,-1,-1,-1,-1},
{0,1,2,4,7,11,14,24,40,41,42,45,47,49,55,58,59,75,-1,-1,-1,-1,-1,-1},
{9,10,11,16,17,21,23,27,28,30,37,38,40,44,46,47,52,56,60,63,67,72,73,76},
{1,12,16,20,24,33,39,43,46,49,53,54,59,67,73,82,-1,-1,-1,-1,-1,-1,-1,-1},
{6,7,9,14,17,19,20,27,29,31,45,46,56,57,65,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{14,16,23,29,32,33,38,46,50,51,52,56,59,60,62,65,70,78,82,-1,-1,-1,-1,-1},
{0,6,21,24,25,28,34,35,41,47,50,54,57,58,65,68,69,72,78,79,81,82,-1,-1},
{0,1,15,16,19,36,37,38,44,46,48,61,74,85,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
{0,4,10,11,14,18,19,32,36,48,50,53,58,61,63,65,68,70,75,79,81,85,-1,-1},
{3,7,9,13,15,17,18,20,27,28,30,31,35,47,57,60,62,65,68,76,-1,-1,-1,-1}};


int availableMachines = numberOfMachines;

// Typedefs
typedef int[0, numberOfChains - 1] chainId_t;

// Ints and Arrays
int numberOfChainsDone = 0;
int tasksDone[numberOfTasks];
bool runnableChains[numberOfChains];
bool assignmentChoice[numberOfChains];

// Channels
broadcast chan startMachines;
broadcast chan chainMachineChan[numberOfChains];
broadcast chan activateChains;</declaration>
	<template>
		<name x="5" y="5">Composer</name>
		<declaration>// Place local declarations here.
clock time;</declaration>
		<location id="id0" x="-102" y="-255">
			<name x="-112" y="-289">Init</name>
			<label kind="invariant" x="-246" y="-238">numberOfChainsDone &lt;= numberOfChains</label> 
 <label kind="exponentialrate" x="-112" y="-221">0</label>
		</location>
		<location id="id1" x="331" y="-255">
			<name x="321" y="-289">Done</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-17" y="-289">numberOfChainsDone &gt;= numberOfChains</label>
		</transition>
	</template>
	<template>
		<name>Chain</name>
		<parameter>const chainId_t cid</parameter>
		<declaration>clock x;
const int chainSize = globalChainSize[cid];
int index = 0;

bool AllDependenciesDone()
{
    bool dependenciesDone = 1;
    int i;
    for (i = 0; i &lt; maxDependencies; i++)
    {
        int value = dependencies[globalChains[cid][index]][i];
        if (value == -1)
            return dependenciesDone;

        dependenciesDone &amp;= tasksDone[value];
    }
    return dependenciesDone;
}</declaration>
		<location id="id2" x="-68" y="-238">
			<name x="-78" y="-272">Idle</name>
			<label kind="exponentialrate" x="-51" y="-255">3</label>
		</location>
		<location id="id3" x="-76" y="51">
			<name x="-102" y="68">Running</name>
			<label kind="invariant" x="-178" y="85">x &lt;= durations[globalChains[cid][index]]</label>
		</location>
		<location id="id4" x="-450" y="-238">
			<name x="-460" y="-272">Done</name>
		</location>
		<init ref="id2"/>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-399" y="-280">index &gt;= chainSize &amp;&amp;
x &gt;= durations[globalChains[cid][index - 1]]</label>
			<label kind="assignment" x="-399" y="-238">numberOfChainsDone++</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-450" y="-127">x &gt;= durations[globalChains[cid][index]]</label>
			<label kind="assignment" x="-450" y="-110">availableMachines++,
tasksDone[globalChains[cid][index]] = 1,
index++</label>
			<nail x="-161" y="-85"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="34" y="-127">index &lt; chainSize &amp;&amp;
availableMachines &gt; 0 &amp;&amp; AllDependenciesDone()</label>
			<label kind="assignment" x="34" y="-85">availableMachines--,
x = 0</label>
			<nail x="17" y="-85"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Composer, Chain;
    </system>
	<queries>
		<query>
			<formula>strategy TimeSchedule = minE (Composer.time) [&lt;=57] : &lt;&gt;Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>inf{Composer.Done} : Composer.time</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Composer.Done</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
